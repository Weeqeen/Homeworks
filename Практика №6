{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Weeqeen/Homeworks/blob/main/%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%20%E2%84%966\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "tKNG_RzWxG6g"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Дисклеймер**\n",
        "\n",
        "В данной практике будет введен дополнительный критерий: чистота и читаемость кода, а также соблюдение правил описанных в начале практики"
      ],
      "metadata": {
        "id": "cFcrKfclKWh0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Сбродов Илья Андреевич"
      ],
      "metadata": {
        "id": "nLalbHAF5rc-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "0SnE87X1xDlV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 1\n",
        "\n",
        "**Задача:**\n",
        "\n",
        "Напишите функцию очищающий список от дубликтов\n",
        "\n",
        "\n",
        "*Запрещено:*\n",
        "\n",
        "*   Использовать set() или готовые функции очищающие список от дубликатов\n",
        "\n",
        "Вввод:\n",
        "\n",
        "```\n",
        "apple banana apple 1 3 4 4 5\n",
        "```\n",
        "\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "apple banana 1 3 4 5\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "VxawR9NubT_F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cleaning(list):\n",
        "  list2 = []\n",
        "  for el in list:\n",
        "    if el not in list2:\n",
        "      list2.append(el)\n",
        "  return(list2)\n",
        "\n",
        "\n",
        "list1 = input(\"Введите список: \").split()\n",
        "print(cleaning(list1))"
      ],
      "metadata": {
        "id": "ml5gnbPXbeju",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3eaf800f-0ace-4393-cc6e-21098477e090"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Введите список: apple banana apple 1 3 4 4 5\n",
            "['apple', 'banana', '1', '3', '4', '5']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 2\n",
        "\n",
        "**Задача:**\n",
        "\n",
        "Написать функцию для нахождения простых чисел в диапазоне\n",
        "\n",
        "Ввод:\n",
        "\n",
        "```\n",
        "10, 50\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47\n",
        "```"
      ],
      "metadata": {
        "id": "y05x0eD0cVCC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def prime_numbers(num1, num2):\n",
        "  list1 = []\n",
        "  for n in range(num1, num2+1):\n",
        "    cnt = 0\n",
        "    for i in range(1, n+1):\n",
        "      if n % i == 0:\n",
        "        cnt += 1\n",
        "    if cnt == 2:\n",
        "      list1.append(n)\n",
        "  return list1\n",
        "\n",
        "\n",
        "num1 = int(input(\"Введите первое число: \"))\n",
        "num2 = int(input(\"Введите второе число: \"))\n",
        "print(prime_numbers(num1, num2))"
      ],
      "metadata": {
        "id": "XSMJnLgrc6Bf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44ff8c66-fbd0-4f28-9ac3-3a4d00f7b9a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Введите первое число: 10\n",
            "Введите второе число: 673\n",
            "[11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 3\n",
        "\n",
        "Напишите функцию для объединения двух списков (список ключей и список значении) в словарь\n",
        "\n",
        "*Запрещено:*\n",
        "\n",
        "*   Использования готовых функции для объединения списков (пример: zip() )\n",
        "\n",
        "Дано:\n",
        "\n",
        "```\n",
        "keys = ['a', 'b', 'c', 'e' ]\n",
        "values = [1, 2, 3, 4]\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "```\n",
        "{'a': 1, 'b': 2, 'c': 3, 'e': 4}\n",
        "```\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "vYM0LyxxdElN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def union_lists(k,v):\n",
        "  my_dict = {}\n",
        "  for i in range(0, len(k)):\n",
        "    my_dict[k[i]] = v[i]\n",
        "  return my_dict\n",
        "\n",
        "\n",
        "keys = [\"a\", \"b\", \"c\", \"e\"]\n",
        "values = [1, 2, 3, 4]\n",
        "print(union_lists(keys, values))"
      ],
      "metadata": {
        "id": "CRvhHTjCdvjS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "67184176-dc9e-4d3c-da33-cc9fffbe5fd8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': 1, 'b': 2, 'c': 3, 'e': 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 4\n",
        "\n",
        "Напишите функцию(ии) для подсчета статистических параметров:\n",
        "*   Сумму\n",
        "*   Среднее арифметическое\n",
        "*   Медиану\n",
        "*   Моду\n",
        "\n",
        "\n",
        "*Запрещено:*\n",
        "\n",
        "*   sum()\n",
        "*   sorted()\n",
        "*   и других функции предоставляющих готовое решение задания\n",
        "\n",
        "Дано:\n",
        "\n",
        "```\n",
        "numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]\n",
        "\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "```\n",
        "{'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'sum': 57}\n",
        "```\n"
      ],
      "metadata": {
        "id": "L_w8H8i-fQcP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def summ(list1):\n",
        "  summ = 0\n",
        "  for i in list1:\n",
        "    summ += i\n",
        "  return summ\n",
        "\n",
        "\n",
        "def average(list1):\n",
        "  summ1 = summ(list1)\n",
        "  cnt = 0\n",
        "  for i in list1:\n",
        "    cnt += 1\n",
        "  avg = summ1 / cnt\n",
        "  return avg\n",
        "\n",
        "\n",
        "def median(list1):\n",
        "  cnt = 0\n",
        "  for i in list1:\n",
        "    cnt += 1\n",
        "  median = (cnt-1)//2\n",
        "  return median\n",
        "\n",
        "\n",
        "def mode(list1):\n",
        "  list2 = []\n",
        "  for i in list1:\n",
        "    if i not in list2:\n",
        "      list2.append(i)\n",
        "    else:\n",
        "      return i\n",
        "\n",
        "\n",
        "numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "print(f\"'mean': {average(numbers)}, 'median': {median(numbers)}, 'mode': {mode(numbers)}, 'summ': {summ(numbers)}\")"
      ],
      "metadata": {
        "id": "dW6jW_rjfuba",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "458cbe90-5520-4b93-8644-f85e6c54b3e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'summ': 57\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 5\n",
        "\n",
        "На ввод поступает строка символов. Строка состоит из слов, которые отделены друг от друга пробелами. Необходимо вывести самое длинное слово и его порядковый номер.\n",
        "\n",
        "*Запрещено:*\n",
        "\n",
        "*   len()\n",
        "\n",
        "Дано:\n",
        "\n",
        "```\n",
        "Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.\n",
        "\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "```\n",
        "Самое длинное слово с номером 5: обязательны\n",
        "```"
      ],
      "metadata": {
        "id": "hZW0NZ7SgTcp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def count_symbols(words):\n",
        "    count_dict = { }\n",
        "    for word in words:\n",
        "        count = 0\n",
        "        for symbol in word:\n",
        "            count += 1\n",
        "        count_dict[word] = count\n",
        "    return count_dict\n",
        "\n",
        "\n",
        "def find_max(dict_):\n",
        "    max_k = 0\n",
        "    max_v = 0\n",
        "    for k, v in dict_.items():\n",
        "        if v > max_v:\n",
        "            max_k = k\n",
        "            max_v = v\n",
        "    return max_k\n",
        "\n",
        "\n",
        "string = 'Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.'\n",
        "words = string.split(' ')\n",
        "dict_ = count_symbols(words)\n",
        "max_word = find_max(dict_)\n",
        "numb = sum([int(i)+1 for i in range(1, len(words)) if max_word == words[i]])\n",
        "print(f\"Самое длинное слово с номером {numb}: {max_word}\")"
      ],
      "metadata": {
        "id": "rC5DpHHLsDYp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "947aef37-29ba-4c07-d1f4-2651f6760189"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Самое длинное слово с номером 5: обязательны\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 6\n",
        "\n",
        "Напишите программу, для управления оценками студентов, со следующими функциями:\n",
        "\n",
        "* Добавление информации о студенте и его оценках.\n",
        "* Подсчет среднего балла студента.\n",
        "* Получение списка всех студентов с их средними баллами.\n",
        "* Поиск студента по имени и вывод его оценок и среднего балла.\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "k5BzJW5ZeaQN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def app(dict1):\n",
        "  inform = {}\n",
        "  full_name = input(\"Введите ФИО студента: \")\n",
        "  group = input(\"Введите академическую группу студента: \")\n",
        "  direction = input(\"Введите направление, на котором учится студент: \")\n",
        "  grade = list(map(int,(input(\"Введите оценки, которые имеет студент(через пробел): \")).split()))\n",
        "  inform[\"Группа\"], inform[\"Направление\"], inform[\"Оценки\"]= group, direction, grade\n",
        "  dict1[full_name] = inform\n",
        "  return dict1\n",
        "\n",
        "\n",
        "def all_score(dict1):\n",
        "    for key, values in my_dict1.items():\n",
        "        for k, v in values.items():\n",
        "            if k == \"Оценки\":\n",
        "                avg = sum(v) / len(v)\n",
        "                print(f\"{key}, Средний балл: {avg}\")\n",
        "\n",
        "\n",
        "def one_score(dict1): #для одного студена\n",
        "    name = input(\"Введите фамилию студента, у которого хотите вывести средний балл: \")\n",
        "    for key,values in dict1.items():\n",
        "        if name in key:\n",
        "            for k, v in values.items():\n",
        "                if k == \"Оценки\":\n",
        "                    v = list(v)\n",
        "                    avg = sum(v) / len(v)\n",
        "                    avg\n",
        "\n",
        "\n",
        "def search(dict1):\n",
        "    for key,values in dict1.items():\n",
        "        username = input(\"Введите фамилию студента, у которого хотите вывести оценки и средний балл: \")\n",
        "        if username in key:\n",
        "            for k, v in values.items():\n",
        "                if k == \"Оценки\":\n",
        "                    print(f\"ФИО: {key}, Оценки: {v}, Средний балл: {one_score(dict1)}\")\n",
        "        break"
      ],
      "metadata": {
        "id": "cvhlltVbdyoL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43a52b9a-fa6d-4f57-e94d-71540f48c038"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Введите ФИО студента: Сбродов Илья Андреевич\n",
            "Введите академическую группу студента: РИ-140935\n",
            "Введите направление, на котором учится студент: ПИИ\n",
            "Введите оценки, которые имеет студент(через пробел): 5 5 5 5 5 5\n",
            "{'Сбродов Илья Андреевич': {'Группа': 'РИ-140935', 'Направление': 'ПИИ', 'Оценки': ['5', '5', '5', '5', '5', '5']}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 7\n",
        "\n",
        "\n",
        "**Задача:**\n",
        "\n",
        "Создайте приложение-викторину с командной строкой, которое задает пользователям вопросы по различным темам и отслеживает их результаты.\n",
        "\n",
        "Ключевые особенности:\n",
        "\n",
        "*   Хранение данных о вопросах и ответах на них, а также баллов за каждый вопрос\n",
        "*   Реализуйте функцию для представления вопросов, принятия ответов пользователей и предоставления обратной связи о том, являются ли ответы правильными или неправильными.\n",
        "*  После завершения викторины отобразите общий балл пользователя из числа ответов на вопросы.\n",
        "*  Реализуйте функцию добавления нового вопроса\n",
        "*  Реализуйте функцию перемешивания вопросов, для отображения случайного вопроса\n"
      ],
      "metadata": {
        "id": "iQ8Z-7PYgu1_"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DhxyYwHwh2V4"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}