# -*- coding: utf-8 -*-
"""Копия Практика 0.6.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B1gPD_JxuGO3uPMuhCBQ6Kivp3PMZeaF

---

# **Дисклеймер**

В данной практике будет введен дополнительный критерий: чистота и читаемость кода, а также соблюдение правил описанных в начале практики
"""

Сбродов Илья Андреевич

"""---

# Задание 1

**Задача:**

Напишите функцию очищающий список от дубликтов


*Запрещено:*

*   Использовать set() или готовые функции очищающие список от дубликатов

Вввод:

```
apple banana apple 1 3 4 4 5
```


Вывод:

```
apple banana 1 3 4 5
```
"""

def cleaning(list):
  list2 = []
  for el in list:
    if el not in list2:
      list2.append(el)
  return(list2)


list1 = input("Введите список: ").split()
print(cleaning(list1))

"""# Задание 2

**Задача:**

Написать функцию для нахождения простых чисел в диапазоне

Ввод:

```
10, 50
```

Вывод:

```
11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47
```
"""

def prime_numbers(num1, num2):
  list1 = []
  for n in range(num1, num2+1):
    cnt = 0
    for i in range(1, n+1):
      if n % i == 0:
        cnt += 1
    if cnt == 2:
      list1.append(n)
  return list1


num1 = int(input("Введите первое число: "))
num2 = int(input("Введите второе число: "))
print(prime_numbers(num1, num2))

"""# Задание 3

Напишите функцию для объединения двух списков (список ключей и список значении) в словарь

*Запрещено:*

*   Использования готовых функции для объединения списков (пример: zip() )

Дано:

```
keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
```

Вывод:
```
{'a': 1, 'b': 2, 'c': 3, 'e': 4}
```



"""

def union_lists(k,v):
  my_dict = {}
  for i in range(0, len(k)):
    my_dict[k[i]] = v[i]
  return my_dict


keys = ["a", "b", "c", "e"]
values = [1, 2, 3, 4]
print(union_lists(keys, values))

"""# Задание 4

Напишите функцию(ии) для подсчета статистических параметров:
*   Сумму
*   Среднее арифметическое
*   Медиану
*   Моду


*Запрещено:*

*   sum()
*   sorted()
*   и других функции предоставляющих готовое решение задания

Дано:

```
numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]

```

Вывод:
```
{'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'sum': 57}
```

"""

def summ(list1):
  summ = 0
  for i in list1:
    summ += i
  return summ


def average(list1):
  summ1 = summ(list1)
  cnt = 0
  for i in list1:
    cnt += 1
  avg = summ1 / cnt
  return avg


def median(list1):
  cnt = 0
  for i in list1:
    cnt += 1
  median = (cnt-1)//2
  return median


def mode(list1):
  list2 = []
  for i in list1:
    if i not in list2:
      list2.append(i)
    else:
      return i


numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(f"'mean': {average(numbers)}, 'median': {median(numbers)}, 'mode': {mode(numbers)}, 'summ': {summ(numbers)}")

"""# Задание 5

На ввод поступает строка символов. Строка состоит из слов, которые отделены друг от друга пробелами. Необходимо вывести самое длинное слово и его порядковый номер.

*Запрещено:*

*   len()

Дано:

```
Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.

```

Вывод:
```
Самое длинное слово с номером 5: обязательны
```
"""

def count_symbols(words):
    count_dict = { }
    for word in words:
        count = 0
        for symbol in word:
            count += 1
        count_dict[word] = count
    return count_dict


def find_max(dict_):
    max_k = 0
    max_v = 0
    for k, v in dict_.items():
        if v > max_v:
            max_k = k
            max_v = v
    return max_k


string = 'Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.'
words = string.split(' ')
dict_ = count_symbols(words)
max_word = find_max(dict_)
numb = sum([int(i)+1 for i in range(1, len(words)) if max_word == words[i]])
print(f"Самое длинное слово с номером {numb}: {max_word}")

"""# Задание 6

Напишите программу, для управления оценками студентов, со следующими функциями:

* Добавление информации о студенте и его оценках.
* Подсчет среднего балла студента.
* Получение списка всех студентов с их средними баллами.
* Поиск студента по имени и вывод его оценок и среднего балла.




"""

def app(dict1):
  inform = {}
  full_name = input("Введите ФИО студента: ")
  group = input("Введите академическую группу студента: ")
  direction = input("Введите направление, на котором учится студент: ")
  grade = list(map(int,(input("Введите оценки, которые имеет студент(через пробел): ")).split()))
  inform["Группа"], inform["Направление"], inform["Оценки"]= group, direction, grade
  dict1[full_name] = inform
  return dict1


def all_score(dict1):
    for key, values in my_dict1.items():
        for k, v in values.items():
            if k == "Оценки":
                avg = sum(v) / len(v)
                print(f"{key}, Средний балл: {avg}")


def one_score(dict1): #для одного студена
    name = input("Введите фамилию студента, у которого хотите вывести средний балл: ")
    for key,values in dict1.items():
        if name in key:
            for k, v in values.items():
                if k == "Оценки":
                    v = list(v)
                    avg = sum(v) / len(v)
                    avg


def search(dict1):
    for key,values in dict1.items():
        username = input("Введите фамилию студента, у которого хотите вывести оценки и средний балл: ")
        if username in key:
            for k, v in values.items():
                if k == "Оценки":
                    print(f"ФИО: {key}, Оценки: {v}, Средний балл: {one_score(dict1)}")
        break

"""# Задание 7


**Задача:**

Создайте приложение-викторину с командной строкой, которое задает пользователям вопросы по различным темам и отслеживает их результаты.

Ключевые особенности:

*   Хранение данных о вопросах и ответах на них, а также баллов за каждый вопрос
*   Реализуйте функцию для представления вопросов, принятия ответов пользователей и предоставления обратной связи о том, являются ли ответы правильными или неправильными.
*  После завершения викторины отобразите общий балл пользователя из числа ответов на вопросы.
*  Реализуйте функцию добавления нового вопроса
*  Реализуйте функцию перемешивания вопросов, для отображения случайного вопроса

"""

import random


def add_question(question, answer, points):
    questions.append({'question': question, 'answer': answer, 'points': points})


def shuffle_questions():
    random.shuffle(questions)


def start_quiz():
    print(f"Это географический тест-викторина, в которой вы будете участвовать."
          f"\nВ большинстве заданий вам нужно будет ответить да/нет на вопрос, а также написать столицу страны, про которую справшивают, плюс первый вопрос разминочный."
          f"\nТакже если вы введёте ответ неправильно или введёте ответ некорректно, то он не будет засчитан.")
    while True:
        cnt = 0
        score = 0
        for q in questions:
            print(q['question'])
            user_answer = input("Ваш ответ: ")
            if user_answer.lower() == q['answer'].lower():
                print("Правильно!")
                score += q['points']
                cnt += 1
            else:
                print(f"Неправильно! Правильный ответ: {q['answer']}")
        print(f"Ваш общий балл: {score};\nКоличество правильных ответов: {cnt} из {len(questions)}.")
        break


questions = [{"question":"2 + 2?", "answer": "4", "points":1}]
score = 0

add_question("Столица Франции?", "Париж", 10)
add_question("Столица России - это Москва?", "да", 5)
add_question("Столица Мексики - это Пуэбла-де-Сарагоса?", "нет", 5)
add_question("Столица США - это Нью-Йорк?", "нет", 5)
add_question("Столица Канады - это Оттава?", "да", 5)

shuffle_questions()
start_quiz()