{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "0ct1u6lqE73j",
        "C5DX5Uf2FfP6",
        "b_mJHXcQGI9t"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Weeqeen/Homeworks/blob/main/%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%20%E2%84%9610\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ФИО: Сбродов Илья Андреевич"
      ],
      "metadata": {
        "id": "fLDS5f_mCnPa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание (совместное с преподавателем)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "-CSHUbWzCqeM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n",
        "Для этого создайте класс Employee со следующими методами:\n",
        "\n",
        "- Метод consume_vacation должен отвечать за списание дней отпуска.\n",
        "\n",
        "Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n",
        "\n",
        "При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n",
        "\n",
        "Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n",
        "\n",
        "- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n",
        "\n",
        "\n",
        "Чтобы проверить работу программы:\n",
        "1. Создайте экземпляр класса Employee.\n",
        "2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n",
        "3. Вызовите метод get_vacation_details."
      ],
      "metadata": {
        "id": "a_flBjZOCwYz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Employee:\n",
        "    vacation_days = 28\n",
        "\n",
        "\n",
        "    def __init__(self, first_name, second_name, gender):\n",
        "        self.first_name = first_name\n",
        "        self.second_name = second_name\n",
        "        self.gender = gender\n",
        "        self.remaining_vacation_days = self.vacation_days\n",
        "\n",
        "    def consume_vacation(self, days):\n",
        "        self.remaining_vacation_days -= days\n",
        "\n",
        "    def get_vacation_details(self):\n",
        "        return f\"Остаток отпускных дней: {self.remaining_vacation_days}\""
      ],
      "metadata": {
        "id": "G4bUraN4CwBI",
        "cellView": "code"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "employee1 = Employee(\"Андрей\", \"Вовкин\", \"м\")\n",
        "employee2 = Employee(\"Максим\", \"Третьяков\", \"м\")\n",
        "\n",
        "print(f'{employee1.first_name} уехал в отпуск на 15 дней.')\n",
        "employee1.consume_vacation(15)\n",
        "print(employee1.get_vacation_details())\n",
        "\n",
        "print(f'{employee2.first_name} улетел в отпуск на 25 дней.')\n",
        "employee2.consume_vacation(25)\n",
        "print(employee2.get_vacation_details())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "voUd3ZN5qTGw",
        "outputId": "3b0da67d-c159-4183-a933-75ef9c7b5dfb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Андрей уехал в отпуск на 15 дней.\n",
            "Остаток отпускных дней: 13\n",
            "Максим улетел в отпуск на 25 дней.\n",
            "Остаток отпускных дней: 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 1"
      ],
      "metadata": {
        "id": "8XGka5GtEBK1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание:\n",
        "\n",
        "Создайте класс с именем Rectangle который имеет:\n",
        "- Атрибуты ширины и высоты.\n",
        "- Метод расчета площади.\n",
        "- Метод расчета периметра.\n",
        "- Метод отображения размеров прямоугольника.\n",
        "\n",
        "Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."
      ],
      "metadata": {
        "id": "jQ4qqd8nEZBY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Rectangle:\n",
        "\n",
        "    def __init__(self, width, length):\n",
        "        self.width = width\n",
        "        self.length = length\n",
        "\n",
        "    def square(self):\n",
        "        self.square = self.width * self.length\n",
        "\n",
        "    def perimeter(self):\n",
        "        self.perimeter = self.width + self.length\n",
        "\n",
        "    def show(self):\n",
        "        return (f\"Прямоугольник с шириной {self.width} и длиной {self.length}\\n\"\n",
        "                f\"Площадью {self.square} квадратных единиц и периметром {self.perimeter} единиц\")"
      ],
      "metadata": {
        "id": "dG6uNPqTEAvt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rectangle1 = Rectangle(10, 15)\n",
        "rectangle1.square()\n",
        "rectangle1.perimeter()\n",
        "print(rectangle1.show())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TsKAKDwrrZAo",
        "outputId": "544de5b1-ef12-42bb-85f7-a397ec6ef14c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Прямоугольник с шириной 10 и длиной 15\n",
            "Площадью 150 квадратныъ единиц и периметром 25 единиц\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 2"
      ],
      "metadata": {
        "id": "0ct1u6lqE73j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание: Создайте мини версию банковской системы:\n",
        "\n",
        "\n",
        "Инструкции:\n",
        "\n",
        "1. Создайте класс BankAccountсо следующими атрибутами:\n",
        "    - account_holder -  владелец счета\n",
        "    - balance - баланс счета\n",
        "\n",
        "2. Реализуйте следующие методы:\n",
        "    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n",
        "    - deposit(amount): Добавьте указанную сумму к балансу.\n",
        "    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n",
        "    - get_balance(): Возврат текущего баланса.\n",
        "\n",
        "\n",
        "Создайте объект класса и продемонстрируйте его возможности"
      ],
      "metadata": {
        "id": "FOpIpcLxE-WK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class BankAccountoo:\n",
        "    balance = 0\n",
        "\n",
        "\n",
        "    def __init__(self, account_holder):\n",
        "        self.account_holder = account_holder\n",
        "        self.my_balance = self.balance\n",
        "\n",
        "    def deposit(self, amount):\n",
        "        self.my_balance += amount\n",
        "        print(f\"Вы внесли {amount} средств\")\n",
        "\n",
        "    def withdraw(self, amount):\n",
        "        if self.my_balance >= amount:\n",
        "            self.my_balance -= amount\n",
        "            print(f\"Вы вывели {amount} средств\")\n",
        "        else:\n",
        "            print(\"Недостаточно средств для вывода!!!\")\n",
        "\n",
        "    def get_balance(self):\n",
        "        print(f'Владелец счёта {self.account_holder} имеет баланс {self.my_balance} средств')"
      ],
      "metadata": {
        "id": "WWXNIUrCE99W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "account1 = BankAccountoo(\"Макс\")\n",
        "\n",
        "account1.deposit(500)\n",
        "account1.get_balance()\n",
        "\n",
        "account1.withdraw(550)\n",
        "\n",
        "account1.withdraw(450)\n",
        "account1.get_balance()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RYBP5X07v6tB",
        "outputId": "b1b9fa0c-3f88-44d8-b126-10e22dd165b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Вы внесли 500 средств\n",
            "Владелец счёта Макс имеет баланс 500 средств\n",
            "Недостаточно средств для вывода!!!\n",
            "Вы вывели 450 средств\n",
            "Владелец счёта Макс имеет баланс 50 средств\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 3"
      ],
      "metadata": {
        "id": "C5DX5Uf2FfP6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"
      ],
      "metadata": {
        "id": "0cR-MYepFgz6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from random import *\n",
        "\n",
        "\n",
        "class game:\n",
        "    damage1 = randint(50, 80)\n",
        "    health1 = randint(300, 500)\n",
        "    damage2 = randint(75, 100)\n",
        "    health2 = randint(300, 750)\n",
        "\n",
        "    def __init__(self, knight_name, dragon_name):\n",
        "        self.knight_name = knight_name\n",
        "        self.knight_health = self.health1\n",
        "        self.knight_damage = self.damage1\n",
        "        self.dragon_name = dragon_name\n",
        "        self.dragon_health = self.health2\n",
        "        self.dragon_damage = self.damage2\n",
        "\n",
        "    def show_stats(self):\n",
        "        return (f'Имя: {self.knight_name}, Урон: {self.knight_damage}, Здоровье: {self.knight_health};\\n'\n",
        "                f'Имя: {self.dragon_name}, Урон: {self.dragon_damage}, Здоровье: {self.dragon_health}')\n",
        "\n",
        "    def war(self):\n",
        "        while self.dragon_health > 0 and self.knight_health > 0:\n",
        "            war = input(\n",
        "                f\"Введите действие, которое в этом раунде будет делать рыцарь\\nзащита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\\nатака\\nубежать\\nВаш выбор: \")\n",
        "            if war == \"атака\":\n",
        "                numb = randint(1, 10)\n",
        "                if numb == 5:\n",
        "                    self.dragon_health = 0\n",
        "                    print(\"Дракон умер, так как на него упал метеорит. Вы спасли деревню и стали героем!!!\")\n",
        "                else:\n",
        "                    self.dragon_health -= self.knight_damage\n",
        "                    self.knight_health -= self.dragon_damage\n",
        "                    print(f'Здоровье дракона - {self.dragon_health}, здоровье рыцаря - {self.knight_health}.')\n",
        "            elif war == \"защита\":\n",
        "                numb = randint(1, 3)\n",
        "                if numb == 3:\n",
        "                    print(\"Дракон не смог пробить вашу защиту, здоровье остаётся прежним.\")\n",
        "                else:\n",
        "                    self.knight_health -= self.dragon_damage\n",
        "                    print(f'Здоровье дракона - {self.dragon_health}, здоровье рыцаря - {self.knight_health}.')\n",
        "            elif war == \"убежать\":\n",
        "                print(\"Вы испугались дракона и убежали, оставив деревню в опастности...\")\n",
        "            if self.knight_health < 0:\n",
        "                print(\"Вы проиграли, дракон победил...\")\n",
        "                break\n",
        "            elif self.dragon_health < 0:\n",
        "                print(\"Вы победили, дракон проиграл!!!\")\n",
        "                break\n",
        "        return \"\"\n",
        "\n",
        "    def games(self):\n",
        "        while self.dragon_health > 0 and self.knight_health > 0:\n",
        "            \"\"\"Это небольшая игра, в которой вам необходимо играть за рыцаря и сразиться с драконом.\n",
        "                В самом начале автоматически создаются рыцарь и дракон.\n",
        "                Дальше будет проиходить сюжет, которым вы будете управлять.\n",
        "                Вы играете за рыцарь, цель которого победить дракона и спасти свою деревню от вторжения дракона.\n",
        "                В маленьком королевстве жил смелый рыцарь. Одной ночью на его деревню напал ужасный дракон, унося стада и пугая жителей.\n",
        "                Рыцарь решил остановить чудовище и отправился в горы, где жил дракон.\"\"\"\n",
        "            print(self.show_stats())\n",
        "            str1 = input(f\"У вас выбор пойти налево, направо, прямо или сразу к логову дракона:\\nВаш выбор: \")\n",
        "            if str1 == \"направо\":\n",
        "                self.knight_health = self.knight_health + 250\n",
        "                print(\n",
        "                    f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')\n",
        "                str2 = input(f\"У вас остался выбор пойти налево, прямо или сразу к логову дракона:\\nВаш выбор: \")\n",
        "                if str2 == \"налево\":\n",
        "                    self.knight_damage = self.knight_damage - 30\n",
        "                    print(\n",
        "                        f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')\n",
        "                    str3 = input(f\"У вас остался выбор пойти прямо или сразу к логову дракона(логово):\\nВаш выбор: \")\n",
        "                    if str3 == \"прямо\":\n",
        "                        self.knight_damage = self.knight_damage + 50\n",
        "                        print(\n",
        "                            f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')\n",
        "                        print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                    elif str3 == \"логово\":\n",
        "                        print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                elif str2 == \"прямо\":\n",
        "                    self.knight_damage = self.knight_damage + 50\n",
        "                    print(\n",
        "                        f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')\n",
        "                    str3 = input(f\"У вас остался выбор пойти налево или в логово:\\nВаш выбор: \")\n",
        "                    if str3 == \"налево\":\n",
        "                        self.knight_damage = self.knight_damage - 30\n",
        "                        print(\n",
        "                            f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')\n",
        "                        print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                    elif str3 == \"логово\":\n",
        "                        print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                elif str2 == \"логово\":\n",
        "                    print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                    self.war()\n",
        "            elif str1 == \"налево\":\n",
        "                self.knight_damage = self.knight_damage - 30\n",
        "                print(\n",
        "                    f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')\n",
        "                str2 = input(f\"У вас остался выбор пойти направо, прямо или в логово:\\nВаш выбор: \")\n",
        "                if str2 == \"направо\":\n",
        "                    self.knight_health = self.knight_health + 250\n",
        "                    print(\n",
        "                        f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')\n",
        "                    str3 = input(f\"У вас остался выбор пойти прямо или в логово:\\nВаш выбор: \")\n",
        "                    if str3 == \"прямо\":\n",
        "                        self.knight_damage = self.knight_damage + 50\n",
        "                        print(\n",
        "                            f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')\n",
        "                        print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                    elif str3 == \"логово\":\n",
        "                        print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                elif str2 == \"прямо\":\n",
        "                    self.knight_damage = self.knight_damage + 50\n",
        "                    print(\n",
        "                        f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')\n",
        "                    str3 = input(f\"У вас остался выбор пойти направо или в логово:\\nВаш выбор: \")\n",
        "                    if str3 == \"направо\":\n",
        "                        self.knight_health = self.knight_health + 250\n",
        "                        print(\n",
        "                            f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')\n",
        "                        print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                elif str2 == \"логово\":\n",
        "                    print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                    self.war()\n",
        "            elif str1 == \"прямо\":\n",
        "                self.knight_damage = self.knight_damage + 50\n",
        "                print(\n",
        "                    f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')\n",
        "                str2 = input(f\"У вас остался выбор пойти направо, налево или в логово:\\nВаш выбор: \")\n",
        "                if str2 == \"направо\":\n",
        "                    self.knight_health = self.knight_health + 250\n",
        "                    print(\n",
        "                        f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')\n",
        "                    str3 = input(f\"У вас остался выбор пойти налево или в логово:\\nВаш выбор: \")\n",
        "                    if str3 == \"налево\":\n",
        "                        self.knight_damage = self.knight_damage - 30\n",
        "                        print(\n",
        "                            f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')\n",
        "                        print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                    elif str3 == \"логово\":\n",
        "                        print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                elif str2 == \"налево\":\n",
        "                    self.knight_damage = self.knight_damage - 30\n",
        "                    print(\n",
        "                        f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')\n",
        "                    str3 = input(f\"У вас остался выбор пойти направо или в логово:\\nВаш выбор: \")\n",
        "                    if str3 == \"направо\":\n",
        "                        self.knight_health = self.knight_health + 250\n",
        "                        print(\n",
        "                            f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')\n",
        "                        print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                    elif str3 == \"логово\":\n",
        "                        print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                        self.war()\n",
        "                elif str2 == \"логово\":\n",
        "                    print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                    self.war()\n",
        "            elif str1 == \"логово\":\n",
        "                print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                self.war()"
      ],
      "metadata": {
        "id": "Oz9BZbhAFwua"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "game1 = game(\"Рыцарь\", \"Дракон\")\n",
        "print(game1.games())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EnGsHTRL4pZ_",
        "outputId": "08067c76-4f76-4337-e8f4-77c9fdcc64b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Имя: Рыцарь, Урон: 60, Здоровье: 413;\n",
            "Имя: Дракон, Урон: 82, Здоровье: 688\n",
            "У вас выбор пойти налево, направо, прямо или сразу к логову дракона:\n",
            "Ваш выбор: направо\n",
            "Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным 663\n",
            "У вас остался выбор пойти налево, прямо или сразу к логову дракона:\n",
            "Ваш выбор: прямо\n",
            "Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным 110\n",
            "У вас остался выбор пойти налево или в логово:\n",
            "Ваш выбор: логово\n",
            "Рыцарь направился к дракону, где началась битва.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: атака\n",
            "Здоровье дракона - 578, здоровье рыцаря - 581.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: атака\n",
            "Здоровье дракона - 468, здоровье рыцаря - 499.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: атака\n",
            "Здоровье дракона - 358, здоровье рыцаря - 417.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: атака\n",
            "Здоровье дракона - 248, здоровье рыцаря - 335.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: атака\n",
            "Здоровье дракона - 138, здоровье рыцаря - 253.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: защита\n",
            "Здоровье дракона - 138, здоровье рыцаря - 171.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: защита\n",
            "Здоровье дракона - 138, здоровье рыцаря - 89.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: атака\n",
            "Здоровье дракона - 28, здоровье рыцаря - 7.\n",
            "Введите действие, которое в этом раунде будет делать рыцарь\n",
            "защита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\n",
            "атака\n",
            "убежать\n",
            "Ваш выбор: атака\n",
            "Здоровье дракона - -82, здоровье рыцаря - -75.\n",
            "Вы проиграли, дракон победил...\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Дополнительное задание\n"
      ],
      "metadata": {
        "id": "b_mJHXcQGI9t"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задача: Система управления библиотекой\n",
        "\n",
        "**Цель**\n",
        "Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n",
        "\n",
        "**Требования**\n",
        "\n",
        "1. **Определение класса**:\n",
        "   – Создайте класс с именем «Book» со следующими атрибутами:\n",
        "     - `title`\n",
        "     - `автор`\n",
        "     - `isbn`\n",
        "     - `is_borrowed` (по умолчанию `False`)\n",
        "\n",
        "2. **Класс библиотеки**:\n",
        "   - Создайте класс с именем Library, который управляет коллекцией книг.\n",
        "   - Класс должен иметь следующие методы:\n",
        "     - `__init__(self)`: инициализирует пустой список книг.\n",
        "     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n",
        "     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n",
        "     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n",
        "     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n",
        "     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n",
        "\n",
        "3. **Взаимодействие с пользователем**:\n",
        "   - Создайте простое текстовое меню, которое позволит пользователям:\n",
        "     - Добавить книгу\n",
        "     - Одолжить книгу\n",
        "     - Вернуть книгу\n",
        "     - Список доступных книг\n",
        "     - Выйти из программы"
      ],
      "metadata": {
        "id": "pnIUdFPcGOVL"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GKKmdfN8GL6f"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}