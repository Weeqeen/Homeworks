{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Weeqeen/Homeworks/blob/main/%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%20%E2%84%969\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ФИО"
      ],
      "metadata": {
        "id": "8hJfL9b2l439"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Сбродов Илья Андреевич"
      ],
      "metadata": {
        "id": "wRnqvYOkl6EX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Дисклеймер"
      ],
      "metadata": {
        "id": "weOtPwPQmgpD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "В данной практике вам необходимо применить все ваши знания по темам:\n",
        "\n",
        "- Функции\n",
        "- Словари\n",
        "- Списки\n",
        "- Множества\n",
        "- Условные конструкции\n",
        "- Запросы\n",
        "\n",
        "и все что было изучено на прошлых практических занятиях\n",
        "\n",
        "В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно"
      ],
      "metadata": {
        "id": "LznB3uscmjDa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 0"
      ],
      "metadata": {
        "id": "7nSJIqkTvC_C"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Создайте функцию по нахождению уникальных элементов из двух списков\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "a = [1, 2, 3, 4]\n",
        "b = [3, 4, 5, 6]\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "exACjTiVvGUe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1, 2, 3, 4]\n",
        "b = [3, 4, 5, 6]\n",
        "list1 = []\n",
        "for i in a:\n",
        "    if i not in list1:\n",
        "        list1.append(i)\n",
        "for y in b:\n",
        "    if y not in list1:\n",
        "        list1.append(y)\n",
        "print(list1)\n",
        "#print(set(a+b))"
      ],
      "metadata": {
        "id": "dQheNSYd4nd2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9939099-346d-423e-b6a9-523825f26050"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5, 6]\n",
            "{1, 2, 3, 4, 5, 6}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 1"
      ],
      "metadata": {
        "id": "SVWNlBALpCNo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Симулятор виртуального питомца\n",
        "\n",
        "Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.\n",
        "\n",
        "Требования:\n",
        "\n",
        "- Функция для усыновления питомца (имя, тип, возраст).\n",
        "- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.\n",
        "- Функция для отображения состояния питомца (голод, радость, энергия)."
      ],
      "metadata": {
        "id": "RcKA-VEqpC7f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def adoption(info):\n",
        "    pet = {}\n",
        "    pet[\"Имя\"] = info[0]\n",
        "    pet[\"Тип\"] = info[1]\n",
        "    pet[\"Возраст\"] = info[2]\n",
        "    return pet\n",
        "\n",
        "\n",
        "def interaction(pet, list_of_state):\n",
        "    \"\"\"Это виртуальный симулятор домашних животных, в котором вы можете создать питомца, покормить его, поиграть с ним, а также уложить его спать.\n",
        "    В самом начале идёт автоматическое создание питомца, где вы вводите имя, тип и возраст.\n",
        "    У питомца имеется состояние, которое включает в себя голод, радость и энергию.\"\"\"\n",
        "    action_1 = input(f\"Введите действие, которое вы хотите произвести с питомцем:\\n1 - Вывести информацию о питомце;\\n2 - Взаимодействие с ним;\\n3 - Выйти с симулятора.\\тВаш ответ: \")\n",
        "    if action_1 == \"1\":\n",
        "        print(f\"Информация о вашем питомце: {pet};\\nСтатистика вашего питомца: {list_of_state}\")\n",
        "    if action_1 == \"2\":\n",
        "        str1 = \"\"\"Action - действие, которое вы будете производить с питомцем.\n",
        "1 - Покормить;\n",
        "2 - Поиграть;\n",
        "3 - Уложить спать.\n",
        "Ваш ответ: \"\"\"\n",
        "        action = input(str1)\n",
        "        if action == \"1\":\n",
        "            if list_of_state[\"Голод\"] < 100:\n",
        "                list_of_state[\"Голод\"] += 10\n",
        "                print(\"Вы покормили питомца.\")\n",
        "            else:\n",
        "                print(\"Ваш питомец не хочет кушать.\")\n",
        "        if action == \"2\":\n",
        "            if list_of_state[\"Голод\"] > 30:\n",
        "                list_of_state[\"Голод\"] -= 50\n",
        "                list_of_state[\"Энергия\"] -= 50\n",
        "                list_of_state[\"Радость\"] += 30\n",
        "                print(f'Вы поиграли с питомцем {pet[\"Имя\"]}.')\n",
        "            else:\n",
        "                print(\"Питомец не хочет играть\")\n",
        "        if action == \"3\":\n",
        "            if  list_of_state[\"Энергия\"] < 30:\n",
        "                list_of_state[\"Радость\"] -= 50\n",
        "                print(f'Вы уложили своего питомца поспать.')\n",
        "            else:\n",
        "                print(\"Ваш питомец не хочет спать.\")\n",
        "    if action_1 == \"3\":\n",
        "        break\n",
        "\n",
        "info = input(\"Введите имя питомца, его тип и возраст: \").split(\", \")\n",
        "pet = adoption(info)\n",
        "hungry, joy, energy = 100, 100, 100\n",
        "list_of_state = {}\n",
        "list_of_state[\"Голод\"], list_of_state[\"Радость\"], list_of_state[\"Энергия\"] = 100, 100, 100\n",
        "\n",
        "while True:\n",
        "    interaction(pet, list_of_state)\n",
        "\n",
        "\n",
        "#Макс, кот, 13 лет"
      ],
      "metadata": {
        "id": "hE7mF-HXpJLO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "outputId": "23ec025b-bd7f-424a-d8c9-d7cbedbb7344"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Введите имя питомца, его тип и возраст: Макс, кот, 13 лет\n",
            "Введите действие, которое вы хотите произвести с питомцем:\n",
            "1 - Вывести информацию о питомце;\n",
            "2 - взаимодействие с ним.\n",
            "Ваш ответ: 2\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-27-70fc310a1685>\u001b[0m in \u001b[0;36m<cell line: 50>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m     \u001b[0minteraction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpet\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_of_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-27-70fc310a1685>\u001b[0m in \u001b[0;36minteraction\u001b[0;34m(pet, list_of_state)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;36m3\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mуложить\u001b[0m \u001b[0mспать\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m Ваш ответ: \"\"\"\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maction\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"1\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlist_of_state\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Голод\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 2"
      ],
      "metadata": {
        "id": "qZ7qFQnmssNd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Рыцарь и дракон\n",
        "\n",
        "Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом\n",
        "\n",
        "Требования:\n",
        "\n",
        "- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)\n",
        "- Управление персонажем и мини сюжет\n",
        "- Создание дракона (Имя, информация о здоровье и уроне)\n",
        "- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)\n",
        "- Реализовать бой между драконом и рыцарем"
      ],
      "metadata": {
        "id": "UaccTe7ltNvg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from random import *\n",
        "\n",
        "\n",
        "def knight_creation(str1):\n",
        "    damage = randint(50, 80)\n",
        "    health = randint(300, 500)\n",
        "    info = {}\n",
        "    info[\"Имя\"], info[\"Доспехи\"], info[\"Оружие\"] = str1.split(\", \")\n",
        "    info[\"Урон\"], info[\"Здоровье\"] = damage, health\n",
        "    return(info)\n",
        "\n",
        "\n",
        "def dragon_creation(name):\n",
        "    info = {}\n",
        "    damage = randint(75, 100)\n",
        "    health = randint(300, 750)\n",
        "    info[\"Имя\"], info[\"Урон\"], info[\"Здоровье\"] = name, damage, health\n",
        "    return(info)\n",
        "\n",
        "def war():\n",
        "    while dragon[\"Здоровье\"] > 0 and knight[\"Здоровье\"] > 0:\n",
        "        war = input(f\"Введите действие, которое в этом раунде будет делать рыцарь\\nзащита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\\nатака\\nубежать\\nВаш выбор: \")\n",
        "        if war == \"атака\":\n",
        "            numb = randint(1,10)\n",
        "            if numb == 5:\n",
        "                dragon[\"Здоровье\"] = 0\n",
        "                print(\"Дракон умер, так как на него упал метеорит. Вы спасли деревню и стали героем!!!\")\n",
        "            else:\n",
        "                dragon[\"Здоровье\"] -= knight[\"Урон\"]\n",
        "                knight[\"Здоровье\"] -= dragon[\"Урон\"]\n",
        "                print(f'Здоровье дракона - {dragon[\"Здоровье\"]}, здоровье рыцаря - {knight[\"Здоровье\"]}.')\n",
        "        elif war == \"защита\":\n",
        "            numb = randint(1,3)\n",
        "            if numb == 3:\n",
        "                print(\"Дракон не смог пробить вашу защиту, здоровье остаётся прежним.\")\n",
        "            else:\n",
        "                knight[\"Здоровье\"] -= dragon[\"Урон\"]\n",
        "                print(f'Здоровье дракона - {dragon[\"Здоровье\"]}, здоровье рыцаря - {knight[\"Здоровье\"]}.'\n",
        "        elif war == \"убежать\":\n",
        "            print(\"Вы испугались дракона и убежали, оставив деревню в опастности...\")\n",
        "        if knight[\"Здоровье\"] < 0:\n",
        "            print(\"Вы проиграли, дракон победил...\")\n",
        "            break\n",
        "        elif dragon[\"Здоровье\"] < 0:\n",
        "            print(\"Вы победили, дракон проиграл!!!\")\n",
        "            break\n",
        "\n",
        "\n",
        "str1 = input(\"Введите через запятую информацию о рыцаре(имя, информация о доспехах, оружии): \")#Рыцарь, Золотые доспехи, Меч\n",
        "knight = knight_creation(str1)\n",
        "name = input(\"Введите имя дракона: \")#Дракон\n",
        "dragon = dragon_creation(name)\n",
        "while dragon[\"Здоровье\"] > 0 and knight[\"Здоровье\"] > 0:\n",
        "    \"\"\"Это небольшая игра, в которой вам необходимо играть за рыцаря и сразиться с драконом.\n",
        "    В самом начале автоматически создаются рыцарь и дракон.\n",
        "    Дальше будет проиходить сюжет, которым вы будете управлять.\n",
        "    Вы играете за рыцарь, цель которого победить дракона и спасти свою деревню от вторжения дракона.\n",
        "    В маленьком королевстве жил смелый рыцарь. Одной ночью на его деревню напал ужасный дракон, унося стада и пугая жителей.\n",
        "    Рыцарь решил остановить чудовище и отправился в горы, где жил дракон.\"\"\"\n",
        "    str1 = input(f\"У вас выбор пойти налево, направо, прямо или сразу к логову дракона:\\nВаш выбор: \")\n",
        "    if str1 == \"направо\":\n",
        "        knight[\"Здоровье\"] = knight[\"Здоровье\"]+250\n",
        "        print(f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {knight[\"Здоровье\"]}')\n",
        "        str2 = input(f\"У вас остался выбор пойти налево, прямо или сразу к логову дракона:\\nВаш выбор: \")\n",
        "        if str2 == \"налево\":\n",
        "            knight[\"Урон\"] = knight[\"Урон\"] - 30\n",
        "            print(f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {knight[\"Урон\"]}')\n",
        "            str3 = input(f\"У вас остался выбор пойти прямо или сразу к логову дракона(логово):\\nВаш выбор: \")\n",
        "            if str3 == \"прямо\":\n",
        "                knight[\"Урон\"] = knight[\"Урон\"]+50\n",
        "                print(f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {knight[\"Урон\"]}')\n",
        "                print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "            elif str3 == \"логово\":\n",
        "                print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "        elif str2 == \"прямо\":\n",
        "            knight[\"Урон\"] = knight[\"Урон\"]+50\n",
        "            print(f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {knight[\"Урон\"]}')\n",
        "            str3 = input(f\"У вас остался выбор пойти налево или в логово:\\nВаш выбор: \")\n",
        "            if str3 == \"налево\":\n",
        "                knight[\"Урон\"] = knight[\"Урон\"] - 30\n",
        "                print(f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {knight[\"Урон\"]}')\n",
        "                print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "            elif str3 == \"логово\":\n",
        "                print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "        elif str2 == \"логово\":\n",
        "            print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "            war()\n",
        "    elif str1 == \"налево\":\n",
        "        knight[\"Урон\"] = knight[\"Урон\"] - 30\n",
        "        print(f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {knight[\"Урон\"]}')\n",
        "        str2 = input(f\"У вас остался выбор пойти направо, прямо или в логово:\\nВаш выбор: \")\n",
        "        if str2 == \"направо\":\n",
        "            knight[\"Здоровье\"] = knight[\"Здоровье\"]+250\n",
        "            print(f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {knight[\"Здоровье\"]}')\n",
        "            str3 = input(f\"У вас остался выбор пойти прямо или в логово:\\nВаш выбор: \")\n",
        "            if str3 == \"прямо\":\n",
        "                knight[\"Урон\"] = knight[\"Урон\"]+50\n",
        "                print(f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {knight[\"Урон\"]}')\n",
        "                print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "            elif str3 == \"логово\":\n",
        "                print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "        elif str2 == \"прямо\":\n",
        "            knight[\"Урон\"] = knight[\"Урон\"]+50\n",
        "            print(f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {knight[\"Урон\"]}')\n",
        "            str3 = input(f\"У вас остался выбор пойти направо или в логово:\\nВаш выбор: \")\n",
        "            if str3 == \"направо\":\n",
        "                knight[\"Здоровье\"] = knight[\"Здоровье\"]+250\n",
        "                print(f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {knight[\"Здоровье\"]}')\n",
        "                print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "        elif str2 == \"логово\":\n",
        "            print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "            war()\n",
        "    elif str1 == \"прямо\":\n",
        "        knight[\"Урон\"] = knight[\"Урон\"]+50\n",
        "        print(f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {knight[\"Урон\"]}')\n",
        "        str2 = input(f\"У вас остался выбор пойти направо, налево или в логово:\\nВаш выбор: \")\n",
        "        if str2 == \"направо\":\n",
        "            knight[\"Здоровье\"] = knight[\"Здоровье\"]+250\n",
        "            print(f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {knight[\"Здоровье\"]}')\n",
        "            str3 = input(f\"У вас остался выбор пойти налево или в логово:\\nВаш выбор: \")\n",
        "            if str3 == \"налево\":\n",
        "                knight[\"Урон\"] = knight[\"Урон\"] - 30\n",
        "                print(f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {knight[\"Урон\"]}')\n",
        "                print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "            elif str3 == \"логово\":\n",
        "                print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "        elif str2 == \"налево\":\n",
        "            knight[\"Урон\"] = knight[\"Урон\"] - 30\n",
        "            print(f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {knight[\"Урон\"]}')\n",
        "            str3 = input(f\"У вас остался выбор пойти направо или в логово:\\nВаш выбор: \")\n",
        "            if str3 == \"направо\":\n",
        "                knight[\"Здоровье\"] = knight[\"Здоровье\"]+250\n",
        "                print(f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {knight[\"Здоровье\"]}')\n",
        "                print(\"Дальше Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "            elif str3 == \"логово\":\n",
        "                print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "                war()\n",
        "        elif str2 == \"логово\":\n",
        "            print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "            war()\n",
        "    elif str1 == \"логово\":\n",
        "        print(\"Рыцарь направился к дракону, где началась битва.\")\n",
        "        war()"
      ],
      "metadata": {
        "id": "LCcxp5Q0srjY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d47aec2d-778d-462b-9697-a8854d4d7c62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "'(' was never closed (<ipython-input-1-10ea5a2c94b6>, line 38)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-10ea5a2c94b6>\"\u001b[0;36m, line \u001b[0;32m38\u001b[0m\n\u001b[0;31m    print(f'Здоровье дракона - {dragon[\"Здоровье\"]}, здоровье рыцаря - {knight[\"Здоровье\"]}.'\u001b[0m\n\u001b[0m         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m '(' was never closed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 3\n"
      ],
      "metadata": {
        "id": "N8oFiEXol3e2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Цель - создать менеджера команды Pokémon, который позволит пользователям:\n",
        "\n",
        "- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)\n",
        "- Удалять покемонов из их команды.\n",
        "- Просматривать подробную информацию обо всех покемонах в команде.\n",
        "- Находить покемона по имени.\n",
        "- Устраивать тренировочный бой между двумя покемонами\n",
        "\n",
        "Для данной задачи используйте: https://pokeapi.co/\n"
      ],
      "metadata": {
        "id": "9p4WQG_Vl7wB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from random import *\n",
        "\n",
        "\n",
        "# функция отправки запроса\n",
        "def send_requests(url):\n",
        "    response = requests.get(url)\n",
        "    status_code = response.status_code\n",
        "\n",
        "    if status_code == 200:\n",
        "      return response.json()\n",
        "    return None\n",
        "\n",
        "\n",
        "def ability(data):\n",
        "    list1 = []\n",
        "    for i in range(len(data[\"abilities\"])):\n",
        "      list1.append(data[\"abilities\"][i][\"ability\"][\"name\"])\n",
        "    return list1\n",
        "\n",
        "\n",
        "def types(data):\n",
        "    list1 = []\n",
        "    for i in range(len(data[\"types\"])):\n",
        "      list1.append(data[\"types\"][i][\"type\"][\"name\"])\n",
        "    return list1\n",
        "\n",
        "\n",
        "def info_name(name):\n",
        "    url = f\"https://pokeapi.co/api/v2/pokemon/{name}\"\n",
        "    data = send_requests(url)\n",
        "    name = data[\"name\"]\n",
        "    weight = data[\"weight\"]\n",
        "    height = data[\"height\"]\n",
        "    abilities = ability(data)\n",
        "    type1 = types(data)\n",
        "\n",
        "    my_dict = {}\n",
        "    my_dict[\"Тип\"], my_dict[\"Вес\"], my_dict[\"Рост\"], my_dict[\"Способности\"] = type1, weight, height, abilities\n",
        "    inform = {}\n",
        "    inform[f'{name}'] = my_dict\n",
        "    return(f\"Подробная информация про покемона: {inform}\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "team = []\n",
        "while True:\n",
        "    str1 = \"\"\"Это менеджер команды Pokémon, который позволяет пользователям:\n",
        "1. Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)\n",
        "2. Удалять покемонов из их команды.\n",
        "3. Просматривать подробную информацию обо всех покемонах в команде.\n",
        "4. Находить покемона по имени.\n",
        "5. Устраивать тренировочный бой между двумя покемонами\"\"\"\n",
        "    action = input(f'{str1}\\nВаш выбор: ')\n",
        "    if action == \"1\":\n",
        "        name = input(\"Введите имя покемона, которого хотите добавить в свою команду: \")\n",
        "        if name not in team:\n",
        "            team.append(name)\n",
        "            print(\"Покемон успешно добавлен в команду.\")\n",
        "        else:\n",
        "            print(\"Данный покемон уже есть в вашей команде!!!\")\n",
        "    elif action == \"2\":\n",
        "        name = input(\"Введите имя покемона, которого хотите удалить из своей команды: \")\n",
        "        if name in team:\n",
        "            team.remove(name)\n",
        "            print(\"Покемон успешно удалён из команды.\")\n",
        "        else:\n",
        "            print(\"Данного покемона нет в вашей команде!!!\")\n",
        "    elif action == \"3\":\n",
        "        name = input(\"Введите имя покемона, у которого хотите посмотреть подробную информацию: \")\n",
        "        info = info_name(name)\n",
        "        print(info)\n",
        "    elif action == \"4\":\n",
        "        name = input(\"Введите имя покемона, которого хотите найти по имени: \")\n",
        "        for i in team:\n",
        "            if i == name:\n",
        "                print(f\"Покемон, которого вы искали: {i}\")\n",
        "    elif action == \"5\":\n",
        "        name1 = input(\"Введите имя первого покемона для тренировочного боя, который находится у вас в команде: \")\n",
        "        name2 = input(\"Введите имя второго покемона для тренировочного боя, который находится у вас в команде: \")\n",
        "        if name1 in team and name2 in team:\n",
        "            numb = randint(1,2)\n",
        "            if numb == 1:\n",
        "                print(f\"Победителем оказывается покемон с именем {name1}!!!\\nК сожалению покемон {name2} потерпел поражение...\")\n",
        "            elif numb == 2:\n",
        "                print(f\"Победителем оказывается покемон с именем {name2}!!!\\nК сожалению покемон {name1} потерпел поражение...\")\n",
        "    else:\n",
        "        break"
      ],
      "metadata": {
        "id": "NnGYp1MTqi5k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0bf7b299-c7eb-4638-9167-ffac10469646"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Это менеджер команды Pokémon, который позволяет пользователям:\n",
            "1. Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)\n",
            "2. Удалять покемонов из их команды.\n",
            "3. Просматривать подробную информацию обо всех покемонах в команде.\n",
            "4. Находить покемона по имени.\n",
            "5. Устраивать тренировочный бой между двумя покемонами\n",
            "Ваш выбор: \n"
          ]
        }
      ]
    }
  ]
}
