# -*- coding: utf-8 -*-
"""Копия Практика 0.8.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zUe-NuQ0clA4v8fsSYAOOgf6lzTMRz5T

# Задание 1

Задача: Создать чат бота для получения информации об исследованиях космоса

Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:

- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.
- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.
- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.
- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.
Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.

Требования:
- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.
- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.
- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.
- Представление данных: Представляйте данные в четкой и организованной форме.
- Опция выхода: позволяет пользователям выходить из приложения в любое время.
"""

import requests


def send_requests(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return None


def astronomical_picture(data):
    picture, title, explanation, date = data["hdurl"], data["title"], data["explanation"], data["date"]
    return f"Ссылка на астрономическую картинку: {picture}\nНазвание: {title}\nОбъяснение: {explanation}\nДата: {date}"


def rover_photos(url, date_camera):
    data = send_requests(url)
    for i in range(len(data["photos"])):
        if (date_camera[0] == data["photos"][i]["rover"]["launch_date"]) and (date_camera[1] == data["photos"][i]["camera"]["name"]):
            return f'{data["photos"][i]["img_src"]}'
        else:
            return f"Произошла ошибка."


def near_Earth_objects(url, object_name):
    data = send_requests(url)
    for k in data["near_earth_objects"].keys():
        if name == data["near_earth_objects"][k][0]["name"]:
            size = data["near_earth_objects"][k][0]["estimated_diameter"]["meters"]["estimated_diameter_max"]
            if data["near_earth_objects"][k][0]["is_potentially_hazardous_asteroid"]:
                threat = "Потенциальная угроза есть."
            else:
                dangerous = "Потенциальной угрозы нет."
            return f"Дата: {k}\nРазмер: {size}\n{threat}"


def space_weather():
    url_sun = "https://api.nasa.gov/DONKI/FLR?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd&api_key=aWX4hFeEGxMKennDmn79fMagjSG86uCeztp3hfkN"
    data_sun = send_requests(url_sun)

    url_geo_storm = "https://api.nasa.gov/DONKI/GST?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd&api_key=aWX4hFeEGxMKennDmn79fMagjSG86uCeztp3hfkN"
    data_storms = send_requests(url_geo_storm)

    return f'Солнечная вспышка {data_sun}\nГеомагнитная буря {data_storms}'


while True:
    your_choice = input(f"Введите номер функции:"
                    f"\n1. Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему:"
                    f"\n2. Фотография с марсохода по типу камеры и дню."
                    f"\n3. Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату."
                    f"\n4. Отображение последних данных о космической погоде."
                    f"\n5. Для выхода просто нажмите кнопку 'enter': "
                    f"\nВаш номер функции: ")

    if your_choice == "1":
        url = "https://api.nasa.gov/planetary/apod?api_key=aWX4hFeEGxMKennDmn79fMagjSG86uCeztp3hfkN"
        data = send_requests(url)
        print(astronomical_picture(data))
    elif your_choice == "2":
        url_rovers  = "https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=aWX4hFeEGxMKennDmn79fMagjSG86uCeztp3hfkN"
        date_camera = input("Введите дату и тип камеры через запятую с пробелом: ").split(", ")
        print(rover_photos(url_rovers, date_camera))
    elif your_choice == "3":
        name = input("Введите название объекта: ")
        dates = input("Введите дату начала и конца сближения объекта(через запятую и с разницей максимум в неделю): ").split(", ")
        url_neo = f"https://api.nasa.gov/neo/rest/v1/feed?start_date={dates[0]}&end_date={dates[1]}&api_key=aWX4hFeEGxMKennDmn79fMagjSG86uCeztp3hfkN"
        print(near_Earth_objects(url_neo, name))
    elif your_choice == "4":
        print(space_weather())

"""# Задание 2

Описание задачи

Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:

Требования:
Извлекать произведения искусства:

- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.
Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.
Фильтровать произведения искусства:

- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).
Отображать подробную информацию об оформлении:

- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.
После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.
Разбивка на страницы и взаимодействие с пользователем:

- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.

Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.

Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы.
"""

import requests


def fetch_artworks(page):
  url = f"https://api.artic.edu/api/v1/artworks?page={page}"
  response = requests.get(url)

  if response.status_code == 200:
      data = response.json()
      return data["data"], data["pagination"]
  return None, None


def filter_by_artist(artworks):
    """Функция фильтрации произведений искусства на основе имени указанного художника."""
    artist_name = input("Введите имя художник: ")
    list1 = []
    for art in artworks:
        if art["artist_title"]:
          if artist_name.lower() in art["artist_title"].lower():
              list1.append(art)
    return list1


def display_details(art):
    """Функция вывода подробную информацию о выбранном произведении.
    Информация включает название, исполнителя, дату и носитель."""
    print(f"Title: {art['title']}")
    print(f"Artist: {art.get('artist_title', 'Unknown')}")
    print(f"Date: {art.get('date_display', 'Unknown date')}")
    print(f"Medium: {art.get('medium.display', 'Unknown medium')}")


def display_artworks(artworks):
    """Функция отображения информации о произведениях искусства."""
    for i, art in enumerate(artworks):
        print(f"{i+1}, {art['title']} by {art.get('artist_title', 'Unknown')}")
    choice = int(input("Введите номер из списка произведения искусства для больших деталей: ")) -1
    display_details(artworks[choice])


def main():
    page = 1
    while True:
      artworks, pagination = fetch_artworks(page)
      if not artworks:
          print("Не найдены произведения искусства!!!")
          break

      print(f"\nPage {page} of {pagination['total_pages']}")

      action = input(f"Введите действие из нижеприведенного списка:\n'next' - следующая страница\n'previous' - предыдущая страница\n'quit' - выйти с функции\n'filter' - фильтрация по художнику\nВаш ввод:")
      if action == 'next':
          if page < pagination['total_pages']:
              page += 1
          else:
              print("Вы на последней странице!!!")
      elif action == "previous":
          if page > 1:
              page -= 1
          else:
              print("Вы на первой странице!!!")
      elif action == "filter":
          filtered_artworks = filter_by_artist(artworks)
          if filtered_artworks:
              display_artworks(filtered_artworks)
          else:
              print("Не найдено произведение искусства для данного художника.")
      elif action == "quit":
          break
      else:
          print("Неправильный ввод. Попробуйте ещё раз!!!")

#1 fetch_artworks(page)
#2 filter_by)artist(artworks)
#3 display_artworks(artworks)
main()

"""# Задание 3

Задача: Создать программу по управлению портфелем криптовалют

Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.

Требования:
Получение текущих цен на криптовалюты:

Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.

Управление портфелем:

- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.
- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).

Отслеживание изменения цен:

- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.
- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.

Поиск исторических данных о ценах:

- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.
- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).

Взаимодействие с пользователем:

- Реализуйте интерфейс командной строки для ввода данных пользователем.
- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.
"""



"""# Дополнительно: Задание 4

Задание 4: Проектное

Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!


Критерии приемки результата:

- Проект включает в себя не менее 5 возможостей для пользователя
- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку
- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)
- Проект должен обязательно включать в себя ряд используемых конструкции:
    - Функции
    - Условные конструкции
    - Ввод/вывод
    - Словари/Списки
- Допускается использование библиотек:
    - requests
    - datetime
    - random

**Здесь добавьте описание вашего проекта**
"""

#  А здесь код