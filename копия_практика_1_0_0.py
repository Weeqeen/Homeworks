# -*- coding: utf-8 -*-
"""Копия Практика 1.0.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iI8SlkP7gCzSdegFzu9Tc0oX5wc-wEDy

ФИО: Сбродов Илья Андреевич

# Задание (совместное с преподавателем)

Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.
Для этого создайте класс Employee со следующими методами:

- Метод consume_vacation должен отвечать за списание дней отпуска.

Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).

При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.

Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.

- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```


Чтобы проверить работу программы:
1. Создайте экземпляр класса Employee.
2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.
3. Вызовите метод get_vacation_details.
"""

class Employee:
    vacation_days = 28


    def __init__(self, first_name, second_name, gender):
        self.first_name = first_name
        self.second_name = second_name
        self.gender = gender
        self.remaining_vacation_days = self.vacation_days

    def consume_vacation(self, days):
        self.remaining_vacation_days -= days

    def get_vacation_details(self):
        return f"Остаток отпускных дней: {self.remaining_vacation_days}"

employee1 = Employee("Андрей", "Вовкин", "м")
employee2 = Employee("Максим", "Третьяков", "м")

print(f'{employee1.first_name} уехал в отпуск на 15 дней.')
employee1.consume_vacation(15)
print(employee1.get_vacation_details())

print(f'{employee2.first_name} улетел в отпуск на 25 дней.')
employee2.consume_vacation(25)
print(employee2.get_vacation_details())

"""# Задание 1

Задание:

Создайте класс с именем Rectangle который имеет:
- Атрибуты ширины и высоты.
- Метод расчета площади.
- Метод расчета периметра.
- Метод отображения размеров прямоугольника.

Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность.
"""

class Rectangle:

    def __init__(self, width, length):
        self.width = width
        self.length = length

    def square(self):
        self.square = self.width * self.length

    def perimeter(self):
        self.perimeter = self.width + self.length

    def show(self):
        return (f"Прямоугольник с шириной {self.width} и длиной {self.length}\n"
                f"Площадью {self.square} квадратных единиц и периметром {self.perimeter} единиц")

rectangle1 = Rectangle(10, 15)
rectangle1.square()
rectangle1.perimeter()
print(rectangle1.show())

"""# Задание 2

Задание: Создайте мини версию банковской системы:


Инструкции:

1. Создайте класс BankAccountсо следующими атрибутами:
    - account_holder -  владелец счета
    - balance - баланс счета

2. Реализуйте следующие методы:
    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.
    - deposit(amount): Добавьте указанную сумму к балансу.
    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.
    - get_balance(): Возврат текущего баланса.


Создайте объект класса и продемонстрируйте его возможности
"""

class BankAccountoo:
    balance = 0


    def __init__(self, account_holder):
        self.account_holder = account_holder
        self.my_balance = self.balance

    def deposit(self, amount):
        self.my_balance += amount
        print(f"Вы внесли {amount} средств")

    def withdraw(self, amount):
        if self.my_balance >= amount:
            self.my_balance -= amount
            print(f"Вы вывели {amount} средств")
        else:
            print("Недостаточно средств для вывода!!!")

    def get_balance(self):
        print(f'Владелец счёта {self.account_holder} имеет баланс {self.my_balance} средств')

account1 = BankAccountoo("Макс")

account1.deposit(500)
account1.get_balance()

account1.withdraw(550)

account1.withdraw(450)
account1.get_balance()

"""# Задание 3

Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов
"""

from random import *


class game:
    damage1 = randint(50, 80)
    health1 = randint(300, 500)
    damage2 = randint(75, 100)
    health2 = randint(300, 750)

    def __init__(self, knight_name, dragon_name):
        self.knight_name = knight_name
        self.knight_health = self.health1
        self.knight_damage = self.damage1
        self.dragon_name = dragon_name
        self.dragon_health = self.health2
        self.dragon_damage = self.damage2

    def show_stats(self):
        return (f'Имя: {self.knight_name}, Урон: {self.knight_damage}, Здоровье: {self.knight_health};\n'
                f'Имя: {self.dragon_name}, Урон: {self.dragon_damage}, Здоровье: {self.dragon_health}')

    def war(self):
        while self.dragon_health > 0 and self.knight_health > 0:
            war = input(
                f"Введите действие, которое в этом раунде будет делать рыцарь\nзащита(при защите есть шанс 1 к 3, что урон дракона не пройдёт по рыцарю)\nатака\nубежать\nВаш выбор: ")
            if war == "атака":
                numb = randint(1, 10)
                if numb == 5:
                    self.dragon_health = 0
                    print("Дракон умер, так как на него упал метеорит. Вы спасли деревню и стали героем!!!")
                else:
                    self.dragon_health -= self.knight_damage
                    self.knight_health -= self.dragon_damage
                    print(f'Здоровье дракона - {self.dragon_health}, здоровье рыцаря - {self.knight_health}.')
            elif war == "защита":
                numb = randint(1, 3)
                if numb == 3:
                    print("Дракон не смог пробить вашу защиту, здоровье остаётся прежним.")
                else:
                    self.knight_health -= self.dragon_damage
                    print(f'Здоровье дракона - {self.dragon_health}, здоровье рыцаря - {self.knight_health}.')
            elif war == "убежать":
                print("Вы испугались дракона и убежали, оставив деревню в опастности...")
            if self.knight_health < 0:
                print("Вы проиграли, дракон победил...")
                break
            elif self.dragon_health < 0:
                print("Вы победили, дракон проиграл!!!")
                break
        return ""

    def games(self):
        while self.dragon_health > 0 and self.knight_health > 0:
            """Это небольшая игра, в которой вам необходимо играть за рыцаря и сразиться с драконом.
                В самом начале автоматически создаются рыцарь и дракон.
                Дальше будет проиходить сюжет, которым вы будете управлять.
                Вы играете за рыцарь, цель которого победить дракона и спасти свою деревню от вторжения дракона.
                В маленьком королевстве жил смелый рыцарь. Одной ночью на его деревню напал ужасный дракон, унося стада и пугая жителей.
                Рыцарь решил остановить чудовище и отправился в горы, где жил дракон."""
            print(self.show_stats())
            str1 = input(f"У вас выбор пойти налево, направо, прямо или сразу к логову дракона:\nВаш выбор: ")
            if str1 == "направо":
                self.knight_health = self.knight_health + 250
                print(
                    f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')
                str2 = input(f"У вас остался выбор пойти налево, прямо или сразу к логову дракона:\nВаш выбор: ")
                if str2 == "налево":
                    self.knight_damage = self.knight_damage - 30
                    print(
                        f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')
                    str3 = input(f"У вас остался выбор пойти прямо или сразу к логову дракона(логово):\nВаш выбор: ")
                    if str3 == "прямо":
                        self.knight_damage = self.knight_damage + 50
                        print(
                            f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')
                        print("Дальше Рыцарь направился к дракону, где началась битва.")
                        self.war()
                    elif str3 == "логово":
                        print("Рыцарь направился к дракону, где началась битва.")
                        self.war()
                elif str2 == "прямо":
                    self.knight_damage = self.knight_damage + 50
                    print(
                        f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')
                    str3 = input(f"У вас остался выбор пойти налево или в логово:\nВаш выбор: ")
                    if str3 == "налево":
                        self.knight_damage = self.knight_damage - 30
                        print(
                            f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')
                        print("Дальше Рыцарь направился к дракону, где началась битва.")
                        self.war()
                    elif str3 == "логово":
                        print("Рыцарь направился к дракону, где началась битва.")
                        self.war()
                elif str2 == "логово":
                    print("Рыцарь направился к дракону, где началась битва.")
                    self.war()
            elif str1 == "налево":
                self.knight_damage = self.knight_damage - 30
                print(
                    f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')
                str2 = input(f"У вас остался выбор пойти направо, прямо или в логово:\nВаш выбор: ")
                if str2 == "направо":
                    self.knight_health = self.knight_health + 250
                    print(
                        f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')
                    str3 = input(f"У вас остался выбор пойти прямо или в логово:\nВаш выбор: ")
                    if str3 == "прямо":
                        self.knight_damage = self.knight_damage + 50
                        print(
                            f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')
                        print("Дальше Рыцарь направился к дракону, где началась битва.")
                        self.war()
                    elif str3 == "логово":
                        print("Рыцарь направился к дракону, где началась битва.")
                        self.war()
                elif str2 == "прямо":
                    self.knight_damage = self.knight_damage + 50
                    print(
                        f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')
                    str3 = input(f"У вас остался выбор пойти направо или в логово:\nВаш выбор: ")
                    if str3 == "направо":
                        self.knight_health = self.knight_health + 250
                        print(
                            f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')
                        print("Дальше Рыцарь направился к дракону, где началась битва.")
                        self.war()
                elif str2 == "логово":
                    print("Рыцарь направился к дракону, где началась битва.")
                    self.war()
            elif str1 == "прямо":
                self.knight_damage = self.knight_damage + 50
                print(
                    f'Рыцарь пошёл прямо и попал к кузнецу. Кузнец выковал ему меч, лучше прежнего. Урон Рыцарь увеличился на 50 единиц и стал равным {self.knight_damage}')
                str2 = input(f"У вас остался выбор пойти направо, налево или в логово:\nВаш выбор: ")
                if str2 == "направо":
                    self.knight_health = self.knight_health + 250
                    print(
                        f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')
                    str3 = input(f"У вас остался выбор пойти налево или в логово:\nВаш выбор: ")
                    if str3 == "налево":
                        self.knight_damage = self.knight_damage - 30
                        print(
                            f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')
                        print("Дальше Рыцарь направился к дракону, где началась битва.")
                        self.war()
                    elif str3 == "логово":
                        print("Рыцарь направился к дракону, где началась битва.")
                        self.war()
                elif str2 == "налево":
                    self.knight_damage = self.knight_damage - 30
                    print(
                        f'Рыцарь пошёл налево и встретил девушек-цыганок. Они его обворовали и он остался без оружия. Урон рыцаря уменьшился на 30 единиц и стал равным: {self.knight_damage}')
                    str3 = input(f"У вас остался выбор пойти направо или в логово:\nВаш выбор: ")
                    if str3 == "направо":
                        self.knight_health = self.knight_health + 250
                        print(
                            f'Рыцарь пошёл направо, найдя небольшую деревню, где получили хлеб с маслом и ваше здоровье увеличилось на 250 единиц и стало равным {self.knight_health}')
                        print("Дальше Рыцарь направился к дракону, где началась битва.")
                        self.war()
                    elif str3 == "логово":
                        print("Рыцарь направился к дракону, где началась битва.")
                        self.war()
                elif str2 == "логово":
                    print("Рыцарь направился к дракону, где началась битва.")
                    self.war()
            elif str1 == "логово":
                print("Рыцарь направился к дракону, где началась битва.")
                self.war()

game1 = game("Рыцарь", "Дракон")
print(game1.games())

"""# Дополнительное задание

Задача: Система управления библиотекой

**Цель**
Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.

**Требования**

1. **Определение класса**:
   – Создайте класс с именем «Book» со следующими атрибутами:
     - `title`
     - `автор`
     - `isbn`
     - `is_borrowed` (по умолчанию `False`)

2. **Класс библиотеки**:
   - Создайте класс с именем Library, который управляет коллекцией книг.
   - Класс должен иметь следующие методы:
     - `__init__(self)`: инициализирует пустой список книг.
     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.
     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.
     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.
     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.
     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.

3. **Взаимодействие с пользователем**:
   - Создайте простое текстовое меню, которое позволит пользователям:
     - Добавить книгу
     - Одолжить книгу
     - Вернуть книгу
     - Список доступных книг
     - Выйти из программы
"""

