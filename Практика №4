{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Weeqeen/Homeworks/blob/main/%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%20%E2%84%964\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Введите ваше ФИО:"
      ],
      "metadata": {
        "id": "k8oVfdwrMXyc"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5mcBLsKMI1-5"
      },
      "outputs": [],
      "source": [
        "Сбродов Илья Андреевич"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Дисклеймер***\n",
        "\n",
        "В данной практике запрещено использования функций:\n",
        "\n",
        "\n",
        "*   sum()\n",
        "*   min()\n",
        "*   max()\n",
        "*   average()\n",
        "*   reversed()\n",
        "*   sorted()\n",
        "*   готовые функции или библиотеки\n"
      ],
      "metadata": {
        "id": "8HbYUbm3Jw3o"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**Задача 1:**\n",
        "\n",
        "\n",
        "\n",
        "Интернет-магазин предлагает следующие условия скидок:\n",
        "\n",
        "*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).\n",
        "*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).\n",
        "\n",
        "Этап 1:\n",
        "Ввод:\n",
        "```\n",
        "Введите стоимость единицы товара: 5\n",
        "Введите количество товара: 1001\n",
        "Введите промокод: GiVEMEDISCONT\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "Ваша скидка: 5%\n",
        "Итоговая сумма: 4754.75\n",
        "```\n",
        "Этап 2:\n",
        "\n",
        "Оформите ваш код в виде функции"
      ],
      "metadata": {
        "id": "HmX0c6YPJSQr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def discount(cost, cnt, promo):\n",
        "    disc = 0\n",
        "    if cnt > 1000:\n",
        "      if promo == \"SUPERDISCOUNT\":\n",
        "        disc = 10\n",
        "      else:\n",
        "        disc = 5\n",
        "    if cnt > 5000:\n",
        "      if promo == \"SUPERDISCOUNT\":\n",
        "        disc = 20\n",
        "      else:\n",
        "        disc = 15\n",
        "    return disc\n",
        "\n",
        "\n",
        "сost_product = int(input(\"Введите стоимость единицы товара: \"))\n",
        "cnt_product = int(input(\"Введите количество товара: \"))\n",
        "promo_code = input(\"Введите промокод: \")\n",
        "disc = discount(сost_product, cnt_product, promo_code)\n",
        "discc = (100 - disc) / 100\n",
        "summ = cnt_product * сost_product * discc\n",
        "print(f\"Ваша скидка: {disc}%\\nИтоговая сумма: {summ}\")"
      ],
      "metadata": {
        "id": "OAIMIpklMN5D",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "38f48b35-5e24-4fd8-9b69-780183e4ca26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Введите стоимость единицы товара: 5\n",
            "Введите количество товара: 1001\n",
            "Введите промокод: GIVEMEDISCOUNT\n",
            "Ваша скидка: 5%\n",
            "Итоговая сумма: 4754.75\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Задача 2:**\n",
        "\n",
        "Этап 1:\n",
        "Напишите программу способную отфильтровать список и вывести только положительные элементы\n",
        "\n",
        "\n",
        "Ввод:\n",
        "```\n",
        "-1 5 1 2 -3\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "5 1 2\n",
        "```\n",
        "\n",
        "Этап 2:\n",
        "\n",
        "Оформите ваш код в виде функции"
      ],
      "metadata": {
        "id": "eeRVWpuLNGJ0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def filter(spisok):\n",
        "    sort_spisok = []\n",
        "    for i in spisok:\n",
        "        if len(i) == 1:\n",
        "            sort_spisok.append(i)\n",
        "    return sort_spisok\n",
        "\n",
        "\n",
        "list1 = (input()).split()\n",
        "print(\" \".join(filter(list1)))"
      ],
      "metadata": {
        "id": "Xbi6bL0WOE9N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65739760-78d0-41d7-b4fe-0b5f3f7ea018"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-1 5 1 2 -3\n",
            "5 1 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Задача 3:**\n",
        "\n",
        "Этап 1:\n",
        "Напишите программу реализующую Алгоритм Евклида\n",
        "\n",
        "\n",
        "> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.\n",
        "\n",
        "\n",
        "\n",
        "Ввод:\n",
        "```\n",
        "30 18\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "6\n",
        "```\n",
        "\n",
        "Этап 2:\n",
        "Оформите ваш код в виде функции\n"
      ],
      "metadata": {
        "id": "lV-w6G-POa6F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Evclid(first, second):\n",
        "    while first != second:\n",
        "        if first == second:\n",
        "            break\n",
        "        if first > second:\n",
        "            if first % second == 0:\n",
        "                break\n",
        "            if first % second > 1:\n",
        "                first = first - second\n",
        "        if first < second:\n",
        "            if second % first == 0:\n",
        "                break\n",
        "            if second % first > 1:\n",
        "                second = second - first\n",
        "    return second\n",
        "\n",
        "\n",
        "a, b = int(input()), int(input())\n",
        "print(Evclid(a, b))"
      ],
      "metadata": {
        "id": "43Dl5tIpOZsu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "659ec660-556b-4ea3-a69c-6344a1fbcd72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30\n",
            "18\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Задача 4:**\n",
        "\n",
        "Этап 1:\n",
        "Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении\n",
        "\n",
        "Этап 2:\n",
        "Оформите ваш код в виде функции\n",
        "\n",
        "Ввод:\n",
        "```\n",
        "apple banana apple\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "apple: 2,\n",
        "banana: 1\n",
        "```"
      ],
      "metadata": {
        "id": "WIfPFxpsO0zL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def counting(str1):\n",
        "    spisok = []\n",
        "    cnt = []\n",
        "    for word in string:\n",
        "        if word not in spisok:\n",
        "            spisok.append(f\"{word}\")\n",
        "            cnt.append(str1.count(word))\n",
        "    return f\"{spisok[0]}: {cnt[0]},\\n{spisok[1]}: {cnt[1]}\"\n",
        "\n",
        "\n",
        "string = list(input(\"Введите строку, в которой хотите подсчитать количество слов: \").split())\n",
        "print(counting(string))"
      ],
      "metadata": {
        "id": "DgsmFeW5Po_x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "673d106f-cc32-4e74-df87-c9da75fc8e3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Введите строку, в которой хотите подсчитать количество слов: apple banana apple banana apple banana\n",
            "apple: 3,\n",
            "banana: 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Задача 5:**\n",
        "\n",
        "Этап 1:\n",
        "Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга\n",
        "\n",
        "Этап 2:\n",
        "Оформите ваш код в виде функции\n",
        "\n",
        "Ввод:\n",
        "```\n",
        "listen, silent\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "True\n",
        "```"
      ],
      "metadata": {
        "id": "5BmIJLUZP9I-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def anagrams(a, b):\n",
        "    cnt1 = [a.count(i) for i in a]\n",
        "    cnt2 = [b.count(i) for i in b]\n",
        "    cnt = 0\n",
        "    summ = 0\n",
        "    for i in a:\n",
        "        i = 1\n",
        "        summ += int(i)\n",
        "    for i in a:\n",
        "        for j in b:\n",
        "            if i == j:\n",
        "                cnt += 1\n",
        "            if cnt == summ:\n",
        "                return True\n",
        "\n",
        "\n",
        "word1 = input(\"Введите первое слово: \")\n",
        "word2 = input(\"Введите второе слово: \")\n",
        "print(anagrams(word1, word2))"
      ],
      "metadata": {
        "id": "7LNW8DuHQJwH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42ca0095-120e-4f6f-c367-7336ee4bc7ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Введите первое слово: рад\n",
            "Введите второе слово: дар\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Задача 6:**\n",
        "\n",
        "Шифр ​​Цезаря\n",
        "\n",
        "Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.\n",
        "\n",
        "Этап 1:\n",
        "\n",
        "Напишите код для реализации данной задачи\n",
        "\n",
        "Этап 2:\n",
        "\n",
        "Оформите код в виде нескольких функций:\n",
        "\n",
        "* Зашифровывает сообщение\n",
        "* Расшифровывает сообщение"
      ],
      "metadata": {
        "id": "-SIWYSq2QKBh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Caesar_s_cipher(str1):\n",
        "    alphabet = \"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮ\"\n",
        "    result = \"\"\n",
        "    for i in str1:\n",
        "        mesto = alphabet.find(i)\n",
        "        new_mesto = mesto + 3\n",
        "        if i in alphabet:\n",
        "            result += alphabet[new_mesto]\n",
        "        else:\n",
        "            result += i\n",
        "\n",
        "\n",
        "string = input(\"Введите строку, которую хотите зашифровать шифром Цезаря: \").upper()\n",
        "print(Caesar_s_cipher(string))"
      ],
      "metadata": {
        "id": "anThYirsQe6N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Задача 7**\n",
        "\n",
        "Задача: «Банковская система»\n",
        "\n",
        "Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:\n",
        "\n",
        "Требования\n",
        "*   Система должна позволять клиентам создавать счета и хранить их балансы.\n",
        "*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.\n",
        "*   Система должна позволять клиентам проверять свой текущий баланс.\n",
        "*   Система должна позволять клиентам переводить деньги между счетами.\n",
        "*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.\n",
        "\n",
        "\n",
        "Задачи\n",
        "1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.\n",
        "Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.\n",
        "2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.\n",
        "3. Бонусное задание\n",
        "Реализуйте способ хранения и печати истории транзакций для каждого счета.\n",
        "\n",
        "Ограничения\n",
        "Не используйте классы или словари.\n",
        "Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.\n"
      ],
      "metadata": {
        "id": "avFZRRXrQz9O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def creature_acc(score, currency):\n",
        "    return currency + score\n",
        "\n",
        "\n",
        "def transaction_insert(account, score):\n",
        "    account1 = account[0] + str(int(account[1:]) + int(score))\n",
        "    return account1\n",
        "\n",
        "\n",
        "def transaction_take_off(account, score):\n",
        "    account1 = account[0] + str(int(account[1:]) - int(score))\n",
        "    return account1\n",
        "\n",
        "\n",
        "\n",
        "action = \" \"\n",
        "while action != \"\":\n",
        "    action = input(\"Введите номер действия, которое хотите выполнить:\"\n",
        "                   \"\\n1 - Создать счёт;\"\n",
        "                   \"\\n2 - Внести или снять деньги со счёта;\"\n",
        "                   \"\\n3 - Проверка баланса;\"\n",
        "                   \"\\n4 - Перевод между счётами\"\n",
        "                   \"\\nВаш запрос: \")\n",
        "    if action == \"1\":\n",
        "        score = input(\"Введите сумму денег, с которой хотите создать счёт: \")\n",
        "        currency = input(\"Введите валюту, в которой будут храниться ваши деньги на счёте: \")\n",
        "        account = creature_acc(score, currency)\n",
        "    if action == \"2\":\n",
        "        operation = input(\"Введите действие, которое хотите совершить со своим счётом(внести или снять деньги)\"\n",
        "                          \"\\nНапишите '+', если хотите внести\"\n",
        "                          \"\\nили '-', если хотите снять деньги: \")\n",
        "        if operation == \"+\":\n",
        "            score = input(\"Введите сумму денег, которую хотите внести: \")\n",
        "            account = transaction_insert(account, score)\n",
        "        if operation == \"-\":\n",
        "            score = input(\"Введите сумму денег, которую хотите снять: \")\n",
        "            account = transaction_take_off(account, score)\n",
        "    if action == \"3\":\n",
        "        print(account)\n",
        "    if action == \"4\":\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dWEW10zIRwjs",
        "outputId": "761d1d03-5ecd-47b4-9ec3-d964c25fe29a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "John Doe's current balance: $500\n",
            "Transaction: Initial deposit, $1000, deposit\n",
            "Transaction: Withdrawal, $500, withdrawal\n",
            "Jane Doe's current balance: $200\n"
          ]
        }
      ]
    }
  ]
}