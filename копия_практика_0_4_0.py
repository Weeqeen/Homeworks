# -*- coding: utf-8 -*-
"""Копия Практика 0.4.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Vj8dQWBmdbSd1uyIo4oCTp98wK6Ho3v

Введите ваше ФИО:
"""

Сбродов Илья Андреевич

"""***Дисклеймер***

В данной практике запрещено использования функций:


*   sum()
*   min()
*   max()
*   average()
*   reversed()
*   sorted()
*   готовые функции или библиотеки

**Задача 1:**



Интернет-магазин предлагает следующие условия скидок:

*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).
*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).

Этап 1:
Ввод:
```
Введите стоимость единицы товара: 5
Введите количество товара: 1001
Введите промокод: GiVEMEDISCONT
```

Вывод:

```
Ваша скидка: 5%
Итоговая сумма: 4754.75
```
Этап 2:

Оформите ваш код в виде функции
"""

def discount(cost, cnt, promo):
    disc = 0
    if cnt > 1000:
      if promo == "SUPERDISCOUNT":
        disc = 10
      else:
        disc = 5
    if cnt > 5000:
      if promo == "SUPERDISCOUNT":
        disc = 20
      else:
        disc = 15
    return disc


сost_product = int(input("Введите стоимость единицы товара: "))
cnt_product = int(input("Введите количество товара: "))
promo_code = input("Введите промокод: ")
disc = discount(сost_product, cnt_product, promo_code)
discc = (100 - disc) / 100
summ = cnt_product * сost_product * discc
print(f"Ваша скидка: {disc}%\nИтоговая сумма: {summ}")

"""**Задача 2:**

Этап 1:
Напишите программу способную отфильтровать список и вывести только положительные элементы


Ввод:
```
-1 5 1 2 -3
```

Вывод:

```
5 1 2
```

Этап 2:

Оформите ваш код в виде функции
"""

def filter(spisok):
    sort_spisok = []
    for i in spisok:
        if len(i) == 1:
            sort_spisok.append(i)
    return sort_spisok


list1 = (input()).split()
print(" ".join(filter(list1)))

"""**Задача 3:**

Этап 1:
Напишите программу реализующую Алгоритм Евклида


> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.



Ввод:
```
30 18
```

Вывод:

```
6
```

Этап 2:
Оформите ваш код в виде функции

"""

def Evclid(first, second):
    while first != second:
        if first == second:
            break
        if first > second:
            if first % second == 0:
                break
            if first % second > 1:
                first = first - second
        if first < second:
            if second % first == 0:
                break
            if second % first > 1:
                second = second - first
    return second


a, b = int(input()), int(input())
print(Evclid(a, b))

"""**Задача 4:**

Этап 1:
Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
apple banana apple
```

Вывод:

```
apple: 2,
banana: 1
```
"""

def counting(str1):
    spisok = []
    cnt = []
    for word in string:
        if word not in spisok:
            spisok.append(f"{word}")
            cnt.append(str1.count(word))
    return f"{spisok[0]}: {cnt[0]},\n{spisok[1]}: {cnt[1]}"


string = list(input("Введите строку, в которой хотите подсчитать количество слов: ").split())
print(counting(string))

"""**Задача 5:**

Этап 1:
Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
listen, silent
```

Вывод:

```
True
```
"""

def anagrams(a, b):
    cnt1 = [a.count(i) for i in a]
    cnt2 = [b.count(i) for i in b]
    cnt = 0
    summ = 0
    for i in a:
        i = 1
        summ += int(i)
    for i in a:
        for j in b:
            if i == j:
                cnt += 1
            if cnt == summ:
                return True


word1 = input("Введите первое слово: ")
word2 = input("Введите второе слово: ")
print(anagrams(word1, word2))

"""**Задача 6:**

Шифр ​​Цезаря

Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.

Этап 1:

Напишите код для реализации данной задачи

Этап 2:

Оформите код в виде нескольких функций:

* Зашифровывает сообщение
* Расшифровывает сообщение
"""

def encryption(str1, shift):
    alphabet = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
    result = ""
    for i in str1:
        if i in alphabet:
            index1 = (alphabet.index(i) + shift) % len(alphabet)
            result += alphabet[index1]
        else:
            result += i
    return result


def decryption(str1, shift):
    alphabet = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
    result = ""
    for i in str1:
        if i in alphabet:
            index1 = (alphabet.index(i) - shift) % len(alphabet)
            result += alphabet[index1]
        else:
            result += i
    return result


def main():
    action = " "
    while action != "":
        action = input(f"Введите действие, которое хотите выполнить с сообщением\n1 - Зашифровать сообщение;\n2 - Расшифровать сообщение;\n3 - Выход из программы.\nВаш выбор: ")
        if action == "1":
            str1 = input("Введите сообщение, которое хотите зашифровать с помощью шифра Цезаря: ").upper()
            shift = int(input("Введите сдвиг для шифрования: "))
            print(encryption(str1, shift))
        elif action == "2":
            str1 = input("Введите сообщение, которое хотите зашифровать с помощью шифра Цезаря: ").upper()
            shift = int(input("Введите сдвиг для шифрования: "))
            print(decryption(str1, shift))
        elif action == "3":
            break
        else:
            print("Вы ввели неправильное действие!!!")


main()

"""**Задача 7**

Задача: «Банковская система»

Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:

Требования
*   Система должна позволять клиентам создавать счета и хранить их балансы.
*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.
*   Система должна позволять клиентам проверять свой текущий баланс.
*   Система должна позволять клиентам переводить деньги между счетами.
*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.


Задачи
1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.
Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.
2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.
3. Бонусное задание
Реализуйте способ хранения и печати истории транзакций для каждого счета.

Ограничения
Не используйте классы или словари.
Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.

"""

def creature_acc(initial_balance):
    accounts.append(initial_balance)
    transactions.append([])
    print(f"Счет создан с начальным балансом: {initial_balance}")


def deposit_amount(account_index, amount):
    if amount > 0:
        accounts[account_index] += amount
        transactions[account_index].append(f"Внесли: {amount}")
        print(f"Вы внесли сумму, равную: {amount}. Текущий баланс: {accounts[account_index]}")
    else:
        print("Ввод неудовлетворяет условиям.")


def withdraw_amount(account_index, amount):
    if amount > 0 and accounts[account_index] >= amount:
        accounts[account_index] -= amount
        transactions[account_index].append(f"Сняли: {amount}")
        print(f"Вы сняли сумму, равную: {amount}. Текущий баланс: {accounts[account_index]}")
    else:
        print("Недостаточно средств или ввод неудовлетворяет условиям.")


def check_account(account_index):
    print(f"Текущий баланс: {accounts[account_index]}")


def transfer_accounts(from_account_index, to_account_index, amount):
    if amount > 0 and accounts[from_account_index] >= amount:
        accounts[from_account_index] -= amount
        accounts[to_account_index] += amount
        transactions[from_account_index].append(f"Перевод: {amount} на счет {to_account_index}")
        transactions[to_account_index].append(f"Получено: {amount} от счета {from_account_index}")
        print(f"Переведено: {amount} с счета {from_account_index} на счет {to_account_index}.")
    else:
        print("Недостаточно средств для перевода или неверная сумма.")


def print_transactions(account_index):
    print(f"История транзакций для счета {account_index}:")
    for transaction in transactions[account_index]:
        print(transaction)


def main():
    accounts = []
    transactions = []
    action = " "
    while action != "":
        action = input("Введите номер действия, которое хотите выполнить:"
                    "\n1 - Создать счёт;"
                    "\n2 - Внести или снять деньги со счёта;"
                    "\n3 - Проверка баланса;"
                    "\n4 - Просмотр трансзакций"
                    "\n5 - Перевод между счетами"
                    "\n6 - Выход"
                    "\nВаш запрос: ")
        if action == "1":
            initial_balance1 = int(input("Введите какая начальная сумма будет у вашего счёта(только число): "))
            creature_acc(initial_balance1)
        elif action == "2":
            operation = input("Введите действие, которое хотите совершить со своим счётом(внести или снять деньги)"
        "\nНапишите '+', если хотите внести"
        "\nили '-', если хотите снять деньги."
        "\nВаш выбор: ")
            if operation == "+":
                account_index1 = int(input(f"Какой индекс у счёта, на который хотите положить деньги\n(если счёт создан первым, то индекс 0;\nесли вторым, то индекс 1, и т.д.)\nВаш индекс:"))
                amount1 = int(input("Введите сумму, которую хотите внести на ваш счёт: "))
                deposit_amount(account_index1, amount1)
            if operation == "-":
                account_index1 = int(input(f"Какой индекс у счёта, с которого хотите снять деньги\n(если счёт создан первым, то индекс 0;\nесли вторым, то индекс 1, и т.д.)\nВаш индекс:"))
                amount1 = int(input("Введите сумму, которую хотите снять с вашего счёта: "))
                withdraw_amount(account_index1, amount1)
        elif action == "3":
            account_index1 = int(input(f"Какой индекс у счёта, у которого хотите посмотреть баланс\n(если счёт создан первым, то индекс 0;\nесли вторым, то индекс 1, и т.д.)\nВаш индекс:"))
            check_account(account_index1)
        elif action == "4":
            account_index1 = int(input(f"Какой индекс у счёта, у которого хотите посмотреть трансзакции\n(если счёт создан первым, то индекс 0;\nесли вторым, то индекс 1, и т.д.)\nВаш индекс:"))
            print_transactions(account_index1)
        elif action == "5":
            account_index1 = int(input(f"Какой индекс у счёта, с которого хотите перевести деньги\n(если счёт создан первым, то индекс 0;\nесли вторым, то индекс 1, и т.д.)\nВаш индекс:"))
            account_index2 = int(input(f"Какой индекс у счёта, на который хотите перевести деньги\n(если счёт создан первым, то индекс 0;\nесли вторым, то индекс 1, и т.д.)\nВаш индекс:"))
            amount1 = int(input(f"Введите сумму, которую хотите перевести с счёта {account_index1} на счёт {account_index2}: "))
            transfer_accounts(account_index1, account_index2, amount1)
        elif action == "6":
            action = ""


main()