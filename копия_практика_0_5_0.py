# -*- coding: utf-8 -*-
"""Копия Практика 0.5.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sSMR71hcdLC7Uem-7rfBIanMXbQxTWa5

ФИО:
"""

Сбродов Илья Андреевич

"""# **Задание 1**

Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени

Дано:

```
{"Alice": 25, "Bob": 30, "Charlie": 35}
```

Вввод:


```
Alice
```

Вывод:


```
Alice 25
```
"""

my_dict = {"Alice" : 25, "Bob" : 30, "Charlie" : 35}
name = input("Введите имя из словаря, у которого хотите узнать возраст: ")
for k,v in my_dict.items():
    if k == name:
        print(k, v)

"""# **Задание 2**

Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка

Ввод:

```
1, 2, 3, 4, 5, 6, 7, 8, 9
```

Вывод:


```
20
```

***Запрещено:***

*   Использование готовых функций для суммирования чисел
"""

numbers = input("Введите числа, которые хотите проссумировать, через пробел: ").split(",")
summ = 0
for el in numbers:
    el = int(el)
    if el > 0 and el % 2 == 0:
        summ += el
print(summ)

"""# **Задание 3**

Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов


Дано:

```
fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
```

Вывод:


```
Yellow fruits:
banana
lemon
mango
```
"""

fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
print("Yellow fruits: ")
for k, v in fruits_and_colors.items():
    if v == "yellow":
        print(k)

"""# **Задание 4**

Дан словарь, необходимо написать функцию меняющую ключ и значение местами

Дано:


```
{"a": 1, "b": 2, "c": 3}
```

Вывод:

```
{1: 'a', 2: 'b', 3: 'c'}
```
"""

my_dict = {"a": 1, "b": 2, "c": 3}


def change(dictionary):
    my_dict1 = {}
    for k,v in dictionary.items():
        my_dict1[v] = k
    return my_dict1


print(change(my_dict))

"""# **Задание 5**

Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество слов

**Критерии**


*   Словарь необходимо отсортировать по убыванию количества элементов в списке.
*   Подсчет элементов должен быть реализован в отдельной функции
*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции




Дано:
```
['apple','banana','orange','apple','apple','banana']
```


Вывод:
```
{'apple':3, 'banana': 2, 'orange': 1}
```

***Запрещено:***

*   Использование готовых функций для сортировки
*   Использование готовых функций для подсчета элементов
"""

list_ = ['banana','apple','orange','apple','apple','banana']


def counting(str1):
    spisok = []
    cnt = []
    for word in str1:
        if word not in spisok:
            spisok.append(f"{str(word)}")
            cnt.append(str1.count(word))
    my_dict = {}
    for i in range(0, len(spisok)):
        my_dict[spisok[i]] = cnt[i]
    return my_dict


my_dict = counting(list_)


def sorting(dictionary):
    sort_dict = {}
    max_key = ""
    max_value = 0
    while dictionary != {}:
        max_key = ""
        max_value = 0
        for k, v in dictionary.items():
            if max_value <= v:
                max_value = v
                max_key = k
        sort_dict[max_key] = max_value
        del dictionary[max_key]
    return sort_dict


print(sorting(my_dict))

"""# **Задание 6**

Дан словарь, содержащий информацию о людях, необходимо:



*   Вывести всех людей старше 30 лет
*   Вывести список городов и количество людей из словаря проживающих в них
*   Вывести список профессий и список людей для каждой профессии

**Критерии**

Каждый из пунктов необходимо реализовать в виде функции
"""

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}


def sort_age(dict):
    upper_30 = []
    for k, v in dict.items():
        for key_, value_ in v.items():
            if key_ == "age" and value_ > 30:
                upper_30.append(k)
    return upper_30


def sort_city(dict):
    dict_city = {}
    for k, v in dict.items():
        # city = v["city"]
        # if city in dict_city.keys():
        #     dict_city[city] += 1
        # else:
        #     dict_city[city] = 1
        for key_, value_ in v.items():
            if key_ == "city":
                if value_ in dict_city.keys():
                    dict_city[value_] += 1
                else:
                    dict_city[value_] = 1
    return dict_city


def sort_occup(dict):
    dict_occup = {}
    for k, v in dict.items():
        # city = v["city"]
        # if city in dict_city.keys():
        #     dict_city[city] += 1
        # else:
        #     dict_city[city] = 1
        for key_, value_ in v.items():
            if key_ == "occupation":
                if value_ in dict_occup.keys():
                    dict_occup[value_] += ", "+k
                else:
                    dict_occup[value_] = k

    return dict_occup



print(sort_age(people_info))
print(sort_city(people_info))
# for k,v in sort_city(people_info).items():
#     print(f"{k}:{v}")
print(sort_occup(people_info))
# for k,v in sort_occup(people_info).items():
#     print(f"{k}:{v}")

"""# **Задание 7**

Задание: Разработка системы отзывов о предметах

Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.

**Функционал:**

*   Добавление отзыва и оценки:
   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.
   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).
*   Просмотр отзывов и оценок:
   *   Пользователь может запросить отзывы для указанного предмета.
   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.
*   Удаление отзыва:
   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.
   *   Программа должна обработать ситуацию, когда индекс введен неправильно.
*   Вычисление среднего балла по предмету:
   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.
   *   Если отзывов нет, программа должна сообщить об этом.


**Критерии:**

*   Код должен быть оформлен в виде функций
*   Необходимо обрабатывать неправильный ввод пользователя
*   Должны быть комментарии к функциям
*   Присутсвует весь дополнительный функционал



**Опционально:**

Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару
"""

def feedback(dict):
    subject = input("Введите название предмета: ")
    score = input("Введите оценку за предмет: ")
    comment = input("Введите комментарий о предмете: ")
    s = {}
    if subject in dict:
        dict[subject] += f"Оценка: {score}, " f"Отзыв: {comment}; \n"
    else:
        dict[subject] = f"Оценка: {score}, " f"Отзыв: {comment}; \n"
    return dict


def show_feedback(dict):
    showing = input("Введите предмет, у которого вы хотите посмотреть отзыв: ")
    if showing in dict:
        return dict[showing]
    else:
        return ("Отзывы по данному предмету отсутствуют!")


def del_feedback(dict):
    deleting = input("Введите предмет, у которого вы хотите удалить отзыв: ")
    if deleting in dict:
        delet = input(f"Скопируйте отзыв из списка:\nВот список отзывов:\n{dict[deleting]}")
        return (dict[deleting]).translate({ord(i): None for i in delet})
    else:
        return "Данного предмета нет в отзывах!"


def sr_ball_feedback(dict):
    subject = input("Введите предмет, у которого хотите посчитать средний балл: ")
    sr_ball = 0
    cnt = 0
    if subject in dict:
        for i in range(6):
            cnt += dict[subject].count(str(i))
            sr_ball += dict[subject].count(str(i))*(i)
        sr_ball = sr_ball/cnt
        return f"Средний балл по {subject}: {sr_ball}"
    else:
        return "Такого предмета нет в отзывах"


dict = {}
dict = feedback(dict)
dict = feedback(dict)
print(sr_ball_feedback(dict))